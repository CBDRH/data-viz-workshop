[
  {
    "objectID": "lectures/lecture-data-vis.html#something-motivational",
    "href": "lectures/lecture-data-vis.html#something-motivational",
    "title": "Visualising data with ggplot2",
    "section": "Something motivational",
    "text": "Something motivational"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#section-1",
    "href": "lectures/lecture-data-vis.html#section-1",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Artwork by @allison_horst"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#ggplot2",
    "href": "lectures/lecture-data-vis.html#ggplot2",
    "title": "Visualising data with ggplot2",
    "section": "ggplot2",
    "text": "ggplot2\n\n\n\nA grammar of graphics\nConsistent syntax\nFlexible\nCustomisable\nggplot2.tidyverse.org\nexts.ggplot2.tidyverse.org/gallery"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#components-of-a-ggplot",
    "href": "lectures/lecture-data-vis.html#components-of-a-ggplot",
    "title": "Visualising data with ggplot2",
    "section": "Components of a ggplot",
    "text": "Components of a ggplot\n\n\nData (data =)\nCoordinate system (x and y)\nAesthetics (aes())\nGeometries (geom_*)"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#ggplot2-components-data",
    "href": "lectures/lecture-data-vis.html#ggplot2-components-data",
    "title": "Visualising data with ggplot2",
    "section": "ggplot2 components: Data",
    "text": "ggplot2 components: Data\n\n\n# Load libraries\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\n# Call ggplot\nggplot(\n  data = penguins\n)"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#ggplot2-components-coordinates",
    "href": "lectures/lecture-data-vis.html#ggplot2-components-coordinates",
    "title": "Visualising data with ggplot2",
    "section": "ggplot2 components: Coordinates",
    "text": "ggplot2 components: Coordinates\n\n\n# Load libraries\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\n# Call ggplot\nggplot(\n  data = penguins,\n  aes(x = body_mass_g)\n)"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#ggplot2-components-geom",
    "href": "lectures/lecture-data-vis.html#ggplot2-components-geom",
    "title": "Visualising data with ggplot2",
    "section": "ggplot2 components: Geom",
    "text": "ggplot2 components: Geom\n\n\n# Load libraries\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\n# Call ggplot\nggplot(\n  data = penguins,\n  aes(x = body_mass_g)\n) + \n  geom_histogram()"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#ggplot2-components-aesthetics",
    "href": "lectures/lecture-data-vis.html#ggplot2-components-aesthetics",
    "title": "Visualising data with ggplot2",
    "section": "ggplot2 components: Aesthetics",
    "text": "ggplot2 components: Aesthetics\n\n\n# Load libraries\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\n# Call ggplot\nggplot(\n  data = penguins,\n  aes(x = body_mass_g)\n) + \n  geom_histogram(\n    color = 'navy',\n    fill = 'lightblue'\n  )"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#ggplot2-a-note-on-style",
    "href": "lectures/lecture-data-vis.html#ggplot2-a-note-on-style",
    "title": "Visualising data with ggplot2",
    "section": "ggplot2 A note on style",
    "text": "ggplot2 A note on style\n\n\n\n# Load libraries\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\n# Call ggplot\nggplot(\n  data = penguins,\n  aes(x = body_mass_g)\n) + \n  geom_histogram(\n    color = 'navy',\n    fill = 'lightblue'\n  )\n\n\n\nlibrary() calls on top\nPlenty of # Comments\nSpacing x = body_mass_g\nIndentation\ndata = and (aes()) on separate lines\nGeoms on new lines\ncolor and fill on new lines\n\n\n\n\n\n\nggplot(data=penguins,aes(x=body_mass_g))+geom_histogram(color='navy',fill='lightblue')\n\nDoes the same but harder to read and debug!"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#section-2",
    "href": "lectures/lecture-data-vis.html#section-2",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Mini Exercise\n\n\n\n 5 minutes\n\nPractice with ggplot2!\nModify the code on the left to produce the figure on the right! \n\n\n\n# Load libraries\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n\n# Call ggplot\nggplot(\n  data = penguins,\n  aes(x = body_mass_g)\n) + \n  geom_histogram(\n    color = 'navy',\n    fill = 'lightblue'\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHints\n\nThis is a density plot\nEnter ?geom_density() at the console to open the R Documentation. Scroll down to the section on Aesthetics to read about other modifiable aesthetics."
  },
  {
    "objectID": "lectures/lecture-data-vis.html#two-numeric",
    "href": "lectures/lecture-data-vis.html#two-numeric",
    "title": "Visualising data with ggplot2",
    "section": "Two numeric",
    "text": "Two numeric\nScatterplot\n\n\n# Plot\nggplot(\n  data = penguins,\n  aes(x = flipper_length_mm, \n      y = bill_length_mm)\n) + \n  geom_point()"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#one-numeric-one-categorical",
    "href": "lectures/lecture-data-vis.html#one-numeric-one-categorical",
    "title": "Visualising data with ggplot2",
    "section": "One numeric, One categorical",
    "text": "One numeric, One categorical\n\n\n# Plot\nggplot(\n  data = penguins,\n  aes(x = island, \n      y = body_mass_g)\n) + \n  geom_boxplot()"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#aesthetic-mappings",
    "href": "lectures/lecture-data-vis.html#aesthetic-mappings",
    "title": "Visualising data with ggplot2",
    "section": "Aesthetic mappings",
    "text": "Aesthetic mappings\nMap variables to visual elements\n\n\nColour\nFill\nShape\nSize\nLine type"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#map-flipper-length-to-x-position-and-bill-length-to-y-position",
    "href": "lectures/lecture-data-vis.html#map-flipper-length-to-x-position-and-bill-length-to-y-position",
    "title": "Visualising data with ggplot2",
    "section": "Map flipper length to x position and bill length to y position",
    "text": "Map flipper length to x position and bill length to y position\n\n\n# Scatterplot\nggplot(\n  data = penguins,\n  aes(x = flipper_length_mm, \n      y = bill_length_mm)\n) + \n  geom_point()"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#map-flipper-length-to-colour",
    "href": "lectures/lecture-data-vis.html#map-flipper-length-to-colour",
    "title": "Visualising data with ggplot2",
    "section": "Map flipper length to colour",
    "text": "Map flipper length to colour\n\n\n# Scatterplot\nggplot(\n  data = penguins,\n  aes(\n    x = flipper_length_mm, \n    y = bill_length_mm,\n    color = flipper_length_mm)\n) + \n  geom_point()"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#map-flipper-length-to-size",
    "href": "lectures/lecture-data-vis.html#map-flipper-length-to-size",
    "title": "Visualising data with ggplot2",
    "section": "Map flipper length to size",
    "text": "Map flipper length to size\n\n\n# Scatterplot\nggplot(\n  data = penguins,\n  aes(\n    x = flipper_length_mm, \n    y = bill_length_mm,\n    size = flipper_length_mm)\n) + \n  geom_point()"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#map-species-to-colour",
    "href": "lectures/lecture-data-vis.html#map-species-to-colour",
    "title": "Visualising data with ggplot2",
    "section": "Map species to colour",
    "text": "Map species to colour\n\n\n# Scatterplot\nggplot(\n  data = penguins,\n  aes(\n    x = flipper_length_mm, \n    y = bill_length_mm,\n    color = species)\n) + \n  geom_point()"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#map-species-to-colour-and-shape",
    "href": "lectures/lecture-data-vis.html#map-species-to-colour-and-shape",
    "title": "Visualising data with ggplot2",
    "section": "Map species to colour and shape",
    "text": "Map species to colour and shape\n\n\n# Scatterplot\nggplot(\n  data = penguins,\n  aes(\n    x = flipper_length_mm, \n    y = bill_length_mm,\n    color = species,\n    shape = species)\n) + \n  geom_point()"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#section-3",
    "href": "lectures/lecture-data-vis.html#section-3",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Mini Exercise\n\n\n\n 5 minutes\n\nPractice with ggplot2!\nModify the code on the left to produce the figure on the right! \n\n\n\n# Plot\nggplot(\n  data = penguins,\n  aes(x = island, \n      y = body_mass_g)\n) + \n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHints"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#data-prep",
    "href": "lectures/lecture-data-vis.html#data-prep",
    "title": "Visualising data with ggplot2",
    "section": "Data prep",
    "text": "Data prep\n\nlibrary(dplyr)\n\npenguins |&gt; \n  group_by(year, species) |&gt; \n  summarise(count = n()) \n\n\n\n# A tibble: 9 × 3\n# Groups:   year [3]\n   year species   count\n  &lt;int&gt; &lt;fct&gt;     &lt;int&gt;\n1  2007 Adelie       50\n2  2007 Chinstrap    26\n3  2007 Gentoo       34\n4  2008 Adelie       50\n5  2008 Chinstrap    18\n6  2008 Gentoo       46\n7  2009 Adelie       52\n8  2009 Chinstrap    24\n9  2009 Gentoo       44"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#plot-as-a-scatterplot",
    "href": "lectures/lecture-data-vis.html#plot-as-a-scatterplot",
    "title": "Visualising data with ggplot2",
    "section": "Plot as a scatterplot",
    "text": "Plot as a scatterplot\n\n\npenguins |&gt; \n  group_by(year, species) |&gt; \n  summarise(count = n()) |&gt; \n  ggplot(\n    aes(x = year, \n        y = count)\n  ) +\n  geom_point()"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#adding-another-layer",
    "href": "lectures/lecture-data-vis.html#adding-another-layer",
    "title": "Visualising data with ggplot2",
    "section": "Adding another layer",
    "text": "Adding another layer\n\n\npenguins |&gt; \n  group_by(year, species) |&gt; \n  summarise(count = n()) |&gt; \n  ggplot(\n    aes(x = year, \n        y = count)\n  ) +\n  geom_point() + \n  geom_line()"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#adding-group",
    "href": "lectures/lecture-data-vis.html#adding-group",
    "title": "Visualising data with ggplot2",
    "section": "Adding group",
    "text": "Adding group\n\n\npenguins |&gt; \n  group_by(year, species) |&gt; \n  summarise(count = n()) |&gt; \n  ggplot(\n    aes(x = year, \n        y = count,\n        group = species)\n  ) +\n  geom_point() + \n  geom_line()"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#layering-geoms",
    "href": "lectures/lecture-data-vis.html#layering-geoms",
    "title": "Visualising data with ggplot2",
    "section": "Layering geoms",
    "text": "Layering geoms\n\n\npenguins |&gt; \n  group_by(year, species) |&gt; \n  summarise(count = n()) |&gt; \n  ggplot(\n    aes(x = year, \n        y = count,\n        group = species,\n        label = count)\n  ) +\n  geom_point() + \n  geom_line() + \n  geom_text()"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#layering-geoms-1",
    "href": "lectures/lecture-data-vis.html#layering-geoms-1",
    "title": "Visualising data with ggplot2",
    "section": "Layering geoms",
    "text": "Layering geoms\n\n\npenguins |&gt; \n  group_by(year, species) |&gt; \n  summarise(count = n()) |&gt; \n  ggplot(\n    aes(x = year, \n        y = count,\n        group = species,\n        label = count)\n  ) +\n  geom_point() + \n  geom_line() + \n  geom_text(nudge_y = 2)"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#global-mapping-vs-local-mapping",
    "href": "lectures/lecture-data-vis.html#global-mapping-vs-local-mapping",
    "title": "Visualising data with ggplot2",
    "section": "Global mapping Vs local mapping",
    "text": "Global mapping Vs local mapping\n\n\npenguins |&gt; \n  group_by(year, species) |&gt; \n  summarise(count = n()) |&gt; \n  ggplot(\n    aes(x = year, \n        y = count,\n        group = species,\n        label = count,\n        color = species)\n  ) +\n  geom_point() + \n  geom_line() + \n  geom_text(nudge_y = 2)"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#global-mapping-vs-local-mapping-1",
    "href": "lectures/lecture-data-vis.html#global-mapping-vs-local-mapping-1",
    "title": "Visualising data with ggplot2",
    "section": "Global mapping Vs local mapping",
    "text": "Global mapping Vs local mapping\n\n\npenguins |&gt; \n  group_by(year, species) |&gt; \n  summarise(count = n()) |&gt; \n  ggplot(\n    aes(x = year, \n        y = count,\n        group = species,\n        label = count)\n  ) +\n  geom_point() + \n  geom_line(\n    aes(color = species)\n  ) + \n  geom_text(nudge_y = 2)"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#geom-specific-properties",
    "href": "lectures/lecture-data-vis.html#geom-specific-properties",
    "title": "Visualising data with ggplot2",
    "section": "Geom-specific properties",
    "text": "Geom-specific properties\n\n\npenguins |&gt; \n  group_by(year, species) |&gt; \n  summarise(count = n()) |&gt; \n  ggplot(\n    aes(x = year, \n        y = count,\n        group = species,\n        label = count)\n  ) +\n  geom_point(\n    size = 3\n  ) + \n  geom_line(\n    aes(color = species)\n  ) + \n  geom_text(\n    nudge_y = 2,\n    color = \"grey40\")"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#scales",
    "href": "lectures/lecture-data-vis.html#scales",
    "title": "Visualising data with ggplot2",
    "section": "Scales",
    "text": "Scales\n\n\np &lt;- penguins |&gt; \n  group_by(year, species) |&gt; \n  summarise(count = n()) |&gt; \n  ggplot(\n    aes(x = year, \n        y = count,\n        group = species,\n        label = count)\n  ) +\n  geom_point(\n    size = 3\n  ) + \n  geom_line(\n    aes(color = species)\n  ) + \n  geom_text(\n    nudge_y = 2,\n    color = \"grey40\")\n\np"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#scales-1",
    "href": "lectures/lecture-data-vis.html#scales-1",
    "title": "Visualising data with ggplot2",
    "section": "Scales",
    "text": "Scales\n\n\np"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#scales-x-axis",
    "href": "lectures/lecture-data-vis.html#scales-x-axis",
    "title": "Visualising data with ggplot2",
    "section": "Scales: x-axis",
    "text": "Scales: x-axis\n\n\np + \n  scale_x_continuous(\n    \"Year\",\n    breaks = 2007:2009)\n\n\n\n\n\n\n\n\n\n\n\n\nTry entering 2007:2009 at the console!"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#scales-y-axis",
    "href": "lectures/lecture-data-vis.html#scales-y-axis",
    "title": "Visualising data with ggplot2",
    "section": "Scales: y-axis",
    "text": "Scales: y-axis\n\n\np + \n  scale_x_continuous(\n    \"Year\",\n    breaks = 2007:2009)  + \n  scale_y_continuous(\n    \"Count\",\n    limits = c(0,75))"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#scales-y-axis-1",
    "href": "lectures/lecture-data-vis.html#scales-y-axis-1",
    "title": "Visualising data with ggplot2",
    "section": "Scales: y-axis",
    "text": "Scales: y-axis\n\n\np + \n  scale_x_continuous(\n    \"Year\",\n    breaks = 2007:2009)  + \n  scale_y_continuous(\n    \"Count\",\n    limits = c(0,75),\n    breaks = seq(0, 75, 25))\n\n\n\n\n\n\n\n\n\n\n\n\nTry entering seq(0, 75, 25) at the console!"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#axis-scales",
    "href": "lectures/lecture-data-vis.html#axis-scales",
    "title": "Visualising data with ggplot2",
    "section": "Axis scales",
    "text": "Axis scales\nWe chose scale_x_continuous() and scale_y_continuous() because these are the natural scales for year and count which are numeric variables.\n\nThere are many other axis scales available for plotting different types of variables.\n\n\nscale_*_continuous()\nscale_*discrete()\nscale_*_binned()\nscale_*_log10()\nscale_*_date()\nscale_*_datetime()"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#scales-colour",
    "href": "lectures/lecture-data-vis.html#scales-colour",
    "title": "Visualising data with ggplot2",
    "section": "Scales: Colour",
    "text": "Scales: Colour\n\n\np + \n  scale_x_continuous(\n    \"Year\",\n    breaks = 2007:2009)  + \n  scale_y_continuous(\n    \"Count\",\n    limits = c(0,75),\n    breaks = seq(0, 75, 25)) + \n  scale_color_manual(\n    NULL,\n    values = c('red',\n               'orange',\n               'blue')\n  )"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#scales-colour-1",
    "href": "lectures/lecture-data-vis.html#scales-colour-1",
    "title": "Visualising data with ggplot2",
    "section": "Scales: Colour",
    "text": "Scales: Colour\n\n\np + \n  scale_x_continuous(\n    \"Year\",\n    breaks = 2007:2009)  + \n  scale_y_continuous(\n    \"Count\",\n    limits = c(0,75),\n    breaks = seq(0, 75, 25)) + \n  scale_color_manual(\n    NULL,\n    values = c('red',\n               'orange',\n               'blue'),\n    label = c(\n      'Gentoo' = 'Fast Swimmer',\n      'Adelie' = 'Ice Dweller',\n      'Chinstrap' = 'Rock Climber')\n    )"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#scales-colour-2",
    "href": "lectures/lecture-data-vis.html#scales-colour-2",
    "title": "Visualising data with ggplot2",
    "section": "Scales: Colour",
    "text": "Scales: Colour\n\n\np + \n  scale_x_continuous(\n    \"Year\",\n    breaks = 2007:2009)  + \n  scale_y_continuous(\n    \"Count\",\n    limits = c(0,75),\n    breaks = seq(0, 75, 25)) + \n  scale_color_brewer(\n    type = \"qual\",\n    palette = \"set1\")"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#scales-colour-3",
    "href": "lectures/lecture-data-vis.html#scales-colour-3",
    "title": "Visualising data with ggplot2",
    "section": "Scales: Colour",
    "text": "Scales: Colour\n\nlibrary(RColorBrewer)\ndisplay.brewer.all()"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#section-4",
    "href": "lectures/lecture-data-vis.html#section-4",
    "title": "Visualising data with ggplot2",
    "section": "",
    "text": "Mini Exercise\n\n\n\n 20 minutes\n\nPractice with ggplot2!\n\n\n\nGoalHints Seriously, help\n\n\nCan you use ggplot2 and the penguins data to produce the figure on the right?\n\n\n\n\nStart by identifying the x, y and fill aesthetics that will go in to aes().\nThis plot combines geom_jitter() and geom_boxplot()\nSetting the alpha = argument makes the boxplots transparent\nUse scale_fill_manual() to control the fill colors for the three different species\n\n\n\n\n\n# Fill in the blanks!\nggplot(\n  data = ,\n  aes(x = ,\n      y = ,\n      fill = )) +\n  geom_jitter(shape = ) +\n  geom_boxplot(\n    alpha = ) + \n  scale_y_continuous(\n    \" \",\n    limits = c( ,  )) + \n  scale_x_discrete(NULL) + \n  scale_fill_manual(NULL,\n    values = c(' ',' ',' '))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBack"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#section",
    "href": "lectures/lecture-data-cleaning.html#section",
    "title": "Cleaning data with dplyr and friends",
    "section": "",
    "text": "Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst”"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#section-1",
    "href": "lectures/lecture-data-cleaning.html#section-1",
    "title": "Cleaning data with dplyr and friends",
    "section": "",
    "text": "Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst”"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#section-2",
    "href": "lectures/lecture-data-cleaning.html#section-2",
    "title": "Cleaning data with dplyr and friends",
    "section": "",
    "text": "dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges\n\n\ndplyr.tidyverse.org/"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#dplyr-verbs",
    "href": "lectures/lecture-data-cleaning.html#dplyr-verbs",
    "title": "Cleaning data with dplyr and friends",
    "section": "dplyr verbs",
    "text": "dplyr verbs\n\n\n\nfilter()\nselect()\nrename()\nmutate()\narrange()\nslice()\ncase_when()\npivot_longer()\n\n\n\nRename a variable?\nSort by a given variable?\nKeep rows that match a condition?\nKeep or drop columns?"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#keep-rows-that-match-a-condition-with-filter",
    "href": "lectures/lecture-data-cleaning.html#keep-rows-that-match-a-condition-with-filter",
    "title": "Cleaning data with dplyr and friends",
    "section": "Keep rows that match a condition with filter()",
    "text": "Keep rows that match a condition with filter()\n\n\n# Load dplyr library\nlibrary(dplyr)\n\n# Load cars dataset\ndata(cars)\n\n# Filter rows\ncars |&gt; \n  filter(speed == 10)\n\n\n  speed dist\n1    10   18\n2    10   26\n3    10   34\n\n\n\n\n\n\n\n# Filter rows\ncars |&gt; \n  filter(speed &gt;= 10 & dist &lt;= 20)\n\n\n  speed dist\n1    10   18\n2    11   17\n3    12   14\n4    12   20\n5    15   20"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#keep-rows-by-position-with-slice",
    "href": "lectures/lecture-data-cleaning.html#keep-rows-by-position-with-slice",
    "title": "Cleaning data with dplyr and friends",
    "section": "Keep rows by position with slice()",
    "text": "Keep rows by position with slice()\n\n\n# Slice rows 1 to 3\ncars |&gt; \n  slice(1:3)\n\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n\n\n\n\n\n\n\n# Slice last 3 rows\ncars |&gt; \n  slice_tail(n=3)\n\n\n  speed dist\n1    24   93\n2    24  120\n3    25   85\n\n\n\n\n\n\n\n\n# Slice speediest 3 rows\ncars |&gt; \n  slice_max(speed, n=3)\n\n\n  speed dist\n1    25   85\n2    24   70\n3    24   92\n4    24   93\n5    24  120"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#keep-or-drop-columns-with-select",
    "href": "lectures/lecture-data-cleaning.html#keep-or-drop-columns-with-select",
    "title": "Cleaning data with dplyr and friends",
    "section": "Keep or drop columns with select()",
    "text": "Keep or drop columns with select()\n\n\n# Filter rows\ncars |&gt; \n  select(speed)\n\n\n   speed\n1      4\n2      4\n3      7\n4      7\n5      8\n6      9\n7     10\n8     10\n9     10\n10    11\n11    11\n12    12\n13    12\n14    12\n15    12\n16    13\n17    13\n18    13\n19    13\n20    14\n21    14\n22    14\n23    14\n24    15\n25    15\n26    15\n27    16\n28    16\n29    17\n30    17\n31    17\n32    18\n33    18\n34    18\n35    18\n36    19\n37    19\n38    19\n39    20\n40    20\n41    20\n42    20\n43    20\n44    22\n45    23\n46    24\n47    24\n48    24\n49    24\n50    25"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#select-columns-with-select",
    "href": "lectures/lecture-data-cleaning.html#select-columns-with-select",
    "title": "Cleaning data with dplyr and friends",
    "section": "Select columns with select()",
    "text": "Select columns with select()\n\n\n# Filter rows\ncars |&gt; \n  select(starts_with(\"d\"))\n\n\n   dist\n1     2\n2    10\n3     4\n4    22\n5    16\n6    10\n7    18\n8    26\n9    34\n10   17\n11   28\n12   14\n13   20\n14   24\n15   28\n16   26\n17   34\n18   34\n19   46\n20   26\n21   36\n22   60\n23   80\n24   20\n25   26\n26   54\n27   32\n28   40\n29   32\n30   40\n31   50\n32   42\n33   56\n34   76\n35   84\n36   36\n37   46\n38   68\n39   32\n40   48\n41   52\n42   56\n43   64\n44   66\n45   54\n46   70\n47   92\n48   93\n49  120\n50   85"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#rename-a-variable-with-rename",
    "href": "lectures/lecture-data-cleaning.html#rename-a-variable-with-rename",
    "title": "Cleaning data with dplyr and friends",
    "section": "Rename a variable with rename()",
    "text": "Rename a variable with rename()\n\n\n# rename variable\ncars |&gt; \n  rename(distance = dist)\n\n\n   speed distance\n1      4        2\n2      4       10\n3      7        4\n4      7       22\n5      8       16\n6      9       10\n7     10       18\n8     10       26\n9     10       34\n10    11       17\n11    11       28\n12    12       14\n13    12       20\n14    12       24\n15    12       28\n16    13       26\n17    13       34\n18    13       34\n19    13       46\n20    14       26\n21    14       36\n22    14       60\n23    14       80\n24    15       20\n25    15       26\n26    15       54\n27    16       32\n28    16       40\n29    17       32\n30    17       40\n31    17       50\n32    18       42\n33    18       56\n34    18       76\n35    18       84\n36    19       36\n37    19       46\n38    19       68\n39    20       32\n40    20       48\n41    20       52\n42    20       56\n43    20       64\n44    22       66\n45    23       54\n46    24       70\n47    24       92\n48    24       93\n49    24      120\n50    25       85\n\n\n\n\n\nNote the syntax:\n\n\ndata |&gt; \n  rename(`new-name` = `old-name`)"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#create-new-variables-with-mutate",
    "href": "lectures/lecture-data-cleaning.html#create-new-variables-with-mutate",
    "title": "Cleaning data with dplyr and friends",
    "section": "Create new variables with mutate()",
    "text": "Create new variables with mutate()\n\n\n# Filter rows\ncars |&gt; \n  mutate(\n    time = dist / speed\n  )\n\n\n   speed dist      time\n1      4    2 0.5000000\n2      4   10 2.5000000\n3      7    4 0.5714286\n4      7   22 3.1428571\n5      8   16 2.0000000\n6      9   10 1.1111111\n7     10   18 1.8000000\n8     10   26 2.6000000\n9     10   34 3.4000000\n10    11   17 1.5454545\n11    11   28 2.5454545\n12    12   14 1.1666667\n13    12   20 1.6666667\n14    12   24 2.0000000\n15    12   28 2.3333333\n16    13   26 2.0000000\n17    13   34 2.6153846\n18    13   34 2.6153846\n19    13   46 3.5384615\n20    14   26 1.8571429\n21    14   36 2.5714286\n22    14   60 4.2857143\n23    14   80 5.7142857\n24    15   20 1.3333333\n25    15   26 1.7333333\n26    15   54 3.6000000\n27    16   32 2.0000000\n28    16   40 2.5000000\n29    17   32 1.8823529\n30    17   40 2.3529412\n31    17   50 2.9411765\n32    18   42 2.3333333\n33    18   56 3.1111111\n34    18   76 4.2222222\n35    18   84 4.6666667\n36    19   36 1.8947368\n37    19   46 2.4210526\n38    19   68 3.5789474\n39    20   32 1.6000000\n40    20   48 2.4000000\n41    20   52 2.6000000\n42    20   56 2.8000000\n43    20   64 3.2000000\n44    22   66 3.0000000\n45    23   54 2.3478261\n46    24   70 2.9166667\n47    24   92 3.8333333\n48    24   93 3.8750000\n49    24  120 5.0000000\n50    25   85 3.4000000"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#create-new-variables-with-mutate-1",
    "href": "lectures/lecture-data-cleaning.html#create-new-variables-with-mutate-1",
    "title": "Cleaning data with dplyr and friends",
    "section": "Create new variables with mutate()",
    "text": "Create new variables with mutate()\n\n\n# Filter rows\ncars |&gt; \n  mutate(\n    class = ifelse(speed &gt;= 10, \n                   \"fast\",\n                   \"slow\")\n  )\n\n\n   speed dist class\n1      4    2  slow\n2      4   10  slow\n3      7    4  slow\n4      7   22  slow\n5      8   16  slow\n6      9   10  slow\n7     10   18  fast\n8     10   26  fast\n9     10   34  fast\n10    11   17  fast\n11    11   28  fast\n12    12   14  fast\n13    12   20  fast\n14    12   24  fast\n15    12   28  fast\n16    13   26  fast\n17    13   34  fast\n18    13   34  fast\n19    13   46  fast\n20    14   26  fast\n21    14   36  fast\n22    14   60  fast\n23    14   80  fast\n24    15   20  fast\n25    15   26  fast\n26    15   54  fast\n27    16   32  fast\n28    16   40  fast\n29    17   32  fast\n30    17   40  fast\n31    17   50  fast\n32    18   42  fast\n33    18   56  fast\n34    18   76  fast\n35    18   84  fast\n36    19   36  fast\n37    19   46  fast\n38    19   68  fast\n39    20   32  fast\n40    20   48  fast\n41    20   52  fast\n42    20   56  fast\n43    20   64  fast\n44    22   66  fast\n45    23   54  fast\n46    24   70  fast\n47    24   92  fast\n48    24   93  fast\n49    24  120  fast\n50    25   85  fast"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#create-new-variables-with-mutate-2",
    "href": "lectures/lecture-data-cleaning.html#create-new-variables-with-mutate-2",
    "title": "Cleaning data with dplyr and friends",
    "section": "Create new variables with mutate()",
    "text": "Create new variables with mutate()\n\n\n# Filter rows\ncars |&gt; \n  mutate(\n    time = dist / speed,\n    class = ifelse(speed &gt;= 10, \n                   \"fast\",\n                   \"slow\")\n  )\n\n\n   speed dist      time class\n1      4    2 0.5000000  slow\n2      4   10 2.5000000  slow\n3      7    4 0.5714286  slow\n4      7   22 3.1428571  slow\n5      8   16 2.0000000  slow\n6      9   10 1.1111111  slow\n7     10   18 1.8000000  fast\n8     10   26 2.6000000  fast\n9     10   34 3.4000000  fast\n10    11   17 1.5454545  fast\n11    11   28 2.5454545  fast\n12    12   14 1.1666667  fast\n13    12   20 1.6666667  fast\n14    12   24 2.0000000  fast\n15    12   28 2.3333333  fast\n16    13   26 2.0000000  fast\n17    13   34 2.6153846  fast\n18    13   34 2.6153846  fast\n19    13   46 3.5384615  fast\n20    14   26 1.8571429  fast\n21    14   36 2.5714286  fast\n22    14   60 4.2857143  fast\n23    14   80 5.7142857  fast\n24    15   20 1.3333333  fast\n25    15   26 1.7333333  fast\n26    15   54 3.6000000  fast\n27    16   32 2.0000000  fast\n28    16   40 2.5000000  fast\n29    17   32 1.8823529  fast\n30    17   40 2.3529412  fast\n31    17   50 2.9411765  fast\n32    18   42 2.3333333  fast\n33    18   56 3.1111111  fast\n34    18   76 4.2222222  fast\n35    18   84 4.6666667  fast\n36    19   36 1.8947368  fast\n37    19   46 2.4210526  fast\n38    19   68 3.5789474  fast\n39    20   32 1.6000000  fast\n40    20   48 2.4000000  fast\n41    20   52 2.6000000  fast\n42    20   56 2.8000000  fast\n43    20   64 3.2000000  fast\n44    22   66 3.0000000  fast\n45    23   54 2.3478261  fast\n46    24   70 2.9166667  fast\n47    24   92 3.8333333  fast\n48    24   93 3.8750000  fast\n49    24  120 5.0000000  fast\n50    25   85 3.4000000  fast"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#create-more-complex-variables-with-case_when",
    "href": "lectures/lecture-data-cleaning.html#create-more-complex-variables-with-case_when",
    "title": "Cleaning data with dplyr and friends",
    "section": "Create more complex variables with case_when()",
    "text": "Create more complex variables with case_when()\n\n\n# Create a new variable\ncars |&gt; \n  mutate(\n    class = case_when(\n      speed &lt;= 4 ~ \"slow\", \n      speed &lt;= 10 ~ \"average\", \n      .default = \"fast\"\n    )\n  )\n\n\n   speed dist   class\n1      4    2    slow\n2      4   10    slow\n3      7    4 average\n4      7   22 average\n5      8   16 average\n6      9   10 average\n7     10   18 average\n8     10   26 average\n9     10   34 average\n10    11   17    fast\n11    11   28    fast\n12    12   14    fast\n13    12   20    fast\n14    12   24    fast\n15    12   28    fast\n16    13   26    fast\n17    13   34    fast\n18    13   34    fast\n19    13   46    fast\n20    14   26    fast\n21    14   36    fast\n22    14   60    fast\n23    14   80    fast\n24    15   20    fast\n25    15   26    fast\n26    15   54    fast\n27    16   32    fast\n28    16   40    fast\n29    17   32    fast\n30    17   40    fast\n31    17   50    fast\n32    18   42    fast\n33    18   56    fast\n34    18   76    fast\n35    18   84    fast\n36    19   36    fast\n37    19   46    fast\n38    19   68    fast\n39    20   32    fast\n40    20   48    fast\n41    20   52    fast\n42    20   56    fast\n43    20   64    fast\n44    22   66    fast\n45    23   54    fast\n46    24   70    fast\n47    24   92    fast\n48    24   93    fast\n49    24  120    fast\n50    25   85    fast"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#sort-variables-with-arrange",
    "href": "lectures/lecture-data-cleaning.html#sort-variables-with-arrange",
    "title": "Cleaning data with dplyr and friends",
    "section": "Sort variables with arrange()",
    "text": "Sort variables with arrange()\n\n\n# Sort by speed\ncars |&gt; \n  arrange(speed)\n\n\n   speed dist\n1      4    2\n2      4   10\n3      7    4\n4      7   22\n5      8   16\n6      9   10\n7     10   18\n8     10   26\n9     10   34\n10    11   17\n11    11   28\n12    12   14\n13    12   20\n14    12   24\n15    12   28\n16    13   26\n17    13   34\n18    13   34\n19    13   46\n20    14   26\n21    14   36\n22    14   60\n23    14   80\n24    15   20\n25    15   26\n26    15   54\n27    16   32\n28    16   40\n29    17   32\n30    17   40\n31    17   50\n32    18   42\n33    18   56\n34    18   76\n35    18   84\n36    19   36\n37    19   46\n38    19   68\n39    20   32\n40    20   48\n41    20   52\n42    20   56\n43    20   64\n44    22   66\n45    23   54\n46    24   70\n47    24   92\n48    24   93\n49    24  120\n50    25   85"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#sort-variables-with-arrange-1",
    "href": "lectures/lecture-data-cleaning.html#sort-variables-with-arrange-1",
    "title": "Cleaning data with dplyr and friends",
    "section": "Sort variables with arrange()",
    "text": "Sort variables with arrange()\n\n\n# Sort by speed\ncars |&gt; \n  arrange(-speed, dist)\n\n\n   speed dist\n1     25   85\n2     24   70\n3     24   92\n4     24   93\n5     24  120\n6     23   54\n7     22   66\n8     20   32\n9     20   48\n10    20   52\n11    20   56\n12    20   64\n13    19   36\n14    19   46\n15    19   68\n16    18   42\n17    18   56\n18    18   76\n19    18   84\n20    17   32\n21    17   40\n22    17   50\n23    16   32\n24    16   40\n25    15   20\n26    15   26\n27    15   54\n28    14   26\n29    14   36\n30    14   60\n31    14   80\n32    13   26\n33    13   34\n34    13   34\n35    13   46\n36    12   14\n37    12   20\n38    12   24\n39    12   28\n40    11   17\n41    11   28\n42    10   18\n43    10   26\n44    10   34\n45     9   10\n46     8   16\n47     7    4\n48     7   22\n49     4    2\n50     4   10"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#the-pipe-operator",
    "href": "lectures/lecture-data-cleaning.html#the-pipe-operator",
    "title": "Cleaning data with dplyr and friends",
    "section": "The pipe operator |>",
    "text": "The pipe operator |&gt;\n\n# Sort by speed\ncars |&gt; arrange(speed)\n\n\n\n\n|&gt; is called the pipe operator\nIt takes the object on the left and passes it to the first argument of the function on the right\n\n\n\n\n\n# Equivalent to above code snippet\narrange(cars, speed)\n\n\n\n\nWe can use |&gt; to chain multiple dplyr verbs\nkeyboard shortcut is Ctrl/Cmd + Shift + M"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#the-pipe-operator-1",
    "href": "lectures/lecture-data-cleaning.html#the-pipe-operator-1",
    "title": "Cleaning data with dplyr and friends",
    "section": "The pipe operator |>",
    "text": "The pipe operator |&gt;\n\n\n# Data prep\ncars |&gt; \n  mutate(time = dist / speed) |&gt; \n  arrange(-time) |&gt; \n  slice(1)\n\n\n  speed dist     time\n1    14   80 5.714286\n\n\n\n\n\nOften we will save the output of such a chain using the assignment operator &lt;-\n\n\n# Data prep\nlongestTime &lt;- cars |&gt;\n  mutate(time = dist / speed) |&gt; \n  arrange(-time) |&gt; \n  slice(1)\n\nlongestTime\n\n\n  speed dist     time\n1    14   80 5.714286"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#section-3",
    "href": "lectures/lecture-data-cleaning.html#section-3",
    "title": "Cleaning data with dplyr and friends",
    "section": "",
    "text": "Created by Arthur Welle"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#the-old-pipe-operator",
    "href": "lectures/lecture-data-cleaning.html#the-old-pipe-operator",
    "title": "Cleaning data with dplyr and friends",
    "section": "The old pipe operator %>%",
    "text": "The old pipe operator %&gt;%\nIf you’ve been using R for a while you may be familiar with the %&gt;% pipe operator shipped with the magrittr package.\n\n\n\n\n\n# Exactly the same thing!\ncars |&gt; \n  mutate(time = dist / speed)  |&gt; \n  arrange(-time)  |&gt;  \n  slice(1)\n\n\n\n# Exactly the same thing!\ncars %&gt;% \n  mutate(time = dist / speed) %&gt;%\n  arrange(-time) %&gt;% \n  slice(1)\n\n\n\n\n\n\nFor simple cases, |&gt; and %&gt;% behave the same\n|&gt; is simpler\n|&gt; is implemented in base R"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#a-note-on-style",
    "href": "lectures/lecture-data-cleaning.html#a-note-on-style",
    "title": "Cleaning data with dplyr and friends",
    "section": "A note on style",
    "text": "A note on style\n\n\n\n# Data prep\ncars |&gt; \n  mutate(time = dist / speed) |&gt; \n  arrange(-time) |&gt; \n  slice(1)\n\n\n\nNeat and easy to read!\nEach verb on a new line\n|&gt; at end of line\nIndentation\nUse of spacing\n\n\n\n\nAvoid this!\n\n# Data prep\ncars|&gt;mutate(time=dist-speed)|&gt;arrange(-time)|&gt;slice(1)"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#section-4",
    "href": "lectures/lecture-data-cleaning.html#section-4",
    "title": "Cleaning data with dplyr and friends",
    "section": "",
    "text": "Mini Exercise\n\n\n\n 10 minutes\n\nPractice with dplyr!\n\nIn the RStudio menu navigate to Tools &gt; Global Options &gt; Code and tick the box to use the native pipe operator\nWe will use the penguins dataset shipped in the palmerpenguins library. Determine the longest bill length among the top 5 lightest female penguins from the Gentoo species.\n\n\n# Code to get you started\nlibrary(palmerpenguins) \n\npenguins |&gt; \n  filter(species == )"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#factors-in-r",
    "href": "lectures/lecture-data-cleaning.html#factors-in-r",
    "title": "Cleaning data with dplyr and friends",
    "section": "Factors in R",
    "text": "Factors in R\nEarlier we used case_when() to create a categorical variable with three categories: fast, average, and slow.\n\n\n# Create a new variable\ncars |&gt; \n  mutate(\n    class = case_when(\n      speed &lt;= 4 ~ \"slow\", \n      speed &lt;= 10 ~ \"average\", \n      .default = \"fast\"\n    )) \n\n\n   speed dist   class\n1      4    2    slow\n2      4   10    slow\n3      7    4 average\n4      7   22 average\n5      8   16 average\n6      9   10 average\n7     10   18 average\n8     10   26 average\n9     10   34 average\n10    11   17    fast\n11    11   28    fast\n12    12   14    fast\n13    12   20    fast\n14    12   24    fast\n15    12   28    fast\n16    13   26    fast\n17    13   34    fast\n18    13   34    fast\n19    13   46    fast\n20    14   26    fast\n21    14   36    fast\n22    14   60    fast\n23    14   80    fast\n24    15   20    fast\n25    15   26    fast\n26    15   54    fast\n27    16   32    fast\n28    16   40    fast\n29    17   32    fast\n30    17   40    fast\n31    17   50    fast\n32    18   42    fast\n33    18   56    fast\n34    18   76    fast\n35    18   84    fast\n36    19   36    fast\n37    19   46    fast\n38    19   68    fast\n39    20   32    fast\n40    20   48    fast\n41    20   52    fast\n42    20   56    fast\n43    20   64    fast\n44    22   66    fast\n45    23   54    fast\n46    24   70    fast\n47    24   92    fast\n48    24   93    fast\n49    24  120    fast\n50    25   85    fast"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#factors-in-r-1",
    "href": "lectures/lecture-data-cleaning.html#factors-in-r-1",
    "title": "Cleaning data with dplyr and friends",
    "section": "Factors in R",
    "text": "Factors in R\nWe can group_by() this new variable, then use summarise() to calculate the average speed for each group.\n\n\n# Create a new variable\ncars |&gt; \n  mutate(\n    class = case_when(\n      speed &lt;= 4 ~ \"slow\", \n      speed &lt;= 10 ~ \"average\", \n      .default = \"fast\"\n    )) |&gt; \n  group_by(class) |&gt;  \n  summarise(\n    mean = mean(speed)\n  ) \n\n\n# A tibble: 3 × 2\n  class    mean\n  &lt;chr&gt;   &lt;dbl&gt;\n1 average  8.71\n2 fast    17.1 \n3 slow     4   \n\n\n\n\nNotice the ordering of the output! This is because the new class variable is a character vector."
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#factors-in-r-2",
    "href": "lectures/lecture-data-cleaning.html#factors-in-r-2",
    "title": "Cleaning data with dplyr and friends",
    "section": "Factors in R",
    "text": "Factors in R\nFactors are useful for handling categorical variables.\n\n\nCategory names\nOrdering categories\nMapping colors to categories (later!)\n\n\n\nTo create a factor you must start by creating a list of the valid levels:\n\n\n# Vector of valid levels\nclassLevels &lt;- c('slow', \n                 'average', \n                 'fast')\n\n# Create factor variable\nfactor(c('fast', 'slow'), \n       levels = classLevels) \n\n\n[1] fast slow\nLevels: slow average fast"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#factors-in-r-3",
    "href": "lectures/lecture-data-cleaning.html#factors-in-r-3",
    "title": "Cleaning data with dplyr and friends",
    "section": "Factors in R",
    "text": "Factors in R\nLet’s put it all together!\n\n\n# Create a new variable\ncars |&gt; \n  mutate(\n    class = \n      factor(\n        case_when(\n          speed &lt;= 4 ~ \"slow\", \n          speed &lt;= 10 ~ \"average\", \n          .default = \"fast\"),\n        levels = classLevels)) |&gt; \n  group_by(class) |&gt;  \n  summarise(\n    mean = mean(speed)\n  ) \n\n\n# A tibble: 3 × 2\n  class    mean\n  &lt;fct&gt;   &lt;dbl&gt;\n1 slow     4   \n2 average  8.71\n3 fast    17.1 \n\n\n\n\n\nNow the ordering is by speed class, not alphabetically!"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#moving-from-wide-to-long-data",
    "href": "lectures/lecture-data-cleaning.html#moving-from-wide-to-long-data",
    "title": "Cleaning data with dplyr and friends",
    "section": "Moving from wide to long data",
    "text": "Moving from wide to long data\nConsider the following dataset:\n\n\n\nBack"
  },
  {
    "objectID": "lectures/lecture-rstudio.html",
    "href": "lectures/lecture-rstudio.html",
    "title": "Orientation to RStudio",
    "section": "",
    "text": "We’re going to spend two days working on R code so let’s take a moment to open up RStudio to orientate ourselves.\n\n\n\n\nHere is a snapshot of the RStudio environment.\n\n\n\n\nThere’s a lot going on!\n\n\n\n\nLet’s break it down.\n\n\n\n\nThis is an R script file (.R extension). Here you can write R code to clean, analyse, and visualise data\n\n\n\n\nNotice that this file is saved with a proper file name analysis.R so we can open and close the file and come back to the code as needed.\n\n\n\n\nThis area has several tabs. The Environment tab plays a key role in managing and visualizing the objects that exist in the current R session.\n\n\n\n\nVarious types of objects can exist in your environment, for example vectors, dataframes and lists.\n\n\n\n\nCurrently we can see the cars dataset and the meanSpeed value stored in the environment.\n\n\n\n\nNotice the Git tab is also in this area. We’ll use that later.\n\n\n\n\nThere are several important tabs in the bottom right-hand corner\n\n\n\n\nThe Files tab shows us all the file in our project. Spot analsis.R!\n\n\n\n\nFrom here we can open files or navigate to different folders.\n\n\n\n\nOther important tabs in this area includes the Plots tab, where are plots will appear, and the Packages tab that has a list of all the installed packages.\n\n\n\n\nHere we have the console.\n\n\n\n\nThe console allows you to run R commands interactively. You can type a command directly into the console and press Enter to execute it and view the results straight away.\n\n\n\n\nThe console keeps track of previously executed commands. You can use the  up and  down arrow keys to scroll through past commands, making it easy to re-run commands or modify and execute them again.\n\n\n\n\nWorking in the console is convenient for quick, interactive commands, but it doesn’t save a persistent record of your entered commands so important code should always be saved in a script.\n\n\n\n\nFinally, note this icon in the top right-hand corner. This tells us we are working in an R Project named cars-study."
  },
  {
    "objectID": "lectures/lecture-rstudio.html#r-projects",
    "href": "lectures/lecture-rstudio.html#r-projects",
    "title": "Orientation to RStudio",
    "section": "R Projects",
    "text": "R Projects\n\nUse R projects to keep all your code organised in a single space\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "lectures/lecture-rstudio.html#relative-paths",
    "href": "lectures/lecture-rstudio.html#relative-paths",
    "title": "Orientation to RStudio",
    "section": "Relative paths",
    "text": "Relative paths\n\nIf the first line of your R script is\nsetwd(\"C:\\Users\\jenny\\path\\that\\only\\I\\have\")\nI will come into your office and SET YOUR COMPUTER ON FIRE 🔥.\n\n\n—Jenny Bryan in Project-oriented workflow\n\nA huge advantage of working in project environments is that we can use relative paths instead of absolute paths.\n\n\n\n\n\n\nTip\n\n\n\nIt is bad practice to include absolute paths like C:\\Users\\jenny\\path\\that\\only\\I\\have in your code\n\n\n\ngetwd()\n\n[1] \"/Users/z3509778/Library/CloudStorage/OneDrive-UNSW/Data Vis Workshop/CourseSite/lectures\""
  },
  {
    "objectID": "exercises/exercise2-1.html",
    "href": "exercises/exercise2-1.html",
    "title": "Getting started",
    "section": "",
    "text": "The End Goal\nLet’s start with the goal in mind! Here it is—a multiple line chart showing the estimated proportion of the population experiencing a range of chronic conditions between 2001 and 2020.\n The simple chart format is enhanced using techniques covered in this workshop.\n\nColour There are 12 chronic conditions presented on the chart presents—if each line was a separate colour it would be visually overwhelming and difficult to distinguish. Instead, most lines are grey, with two conditions hihglighted: Mental Health in Red and Allergies in Green.\nText hierarchy The main chart title is an informative title highlighting the key message. A descriptive subtitle explains in more detail what is plotted in the chart while the data source is provided in the footnote.\nAnnotation Text annotations at the end of each line are used to help distinguish the chronic conditions.\nStory telling Highlighting just two series helps to tell a story about the conditions that are growing more prevalent. Echoing the line colors in the informative title for Mental health and Allergies help to reinforce this narrative.\n\n\n\nThe data\nThe data for this plot come from the National Health Survey (NHS) 2022, a face-to-face interview survey conducted by the Australian Bureau of Statistics (ABS) and designed to collect information on health behaviours, conditions prevalence, and risk factors in Australia. You can read more about the survey on the ABS website here.\nThese data are openly available for download in .xlsx format from the ABS website and a copy is also included in the workshop repo in the file national-health-survey-2022-table-1.xlsx.\n\n\nAims\nIn this exercise you will use dplyr and other tools to read-in and clean the self-assessed health data from the National Health Survey. The raw data is the .xlsx file downloaded from the ABS data. The final output will be a tidy data file in .csv and .Rda format. Essentially, we will use code to go…\n\n\n\n\n\n\n\nFrom this messy excel sheet…\n\n\nTo this tidy dataframe!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy data\n\n\n\nRemember, in a tidy dataset:\n\nEach variable is a column; each column is a variable.\nEach observation is a row; each row is an observation.\nEach value is a cell; each cell is a single value.\n\nIf you examine the output above you will see this is true for the clean data: there are three columns, and each column is a variable: status, state, and percent. Each row is an observation, telling us the per cent for every state and status combination. Finally, each cell is a single value—there are no merged cells.\nNone of these rules of tidy datasets hold for the original .xlsx file!\nR for Data Science (2nd Edition)\n\n\n\n\nHow to complete this exercise\nWhile the first data building exercises was fully guided, here you are challenged to start coding by yourself. Many of the steps are similar to the previous exercise so refer back to the step-by-step guide from Exercise 1 to help you on your way.\nSome hints are provided if you do get stuck. They are hover-able links that look like this: ☠ Hint 1 (try hovering your cursor to get a hint!).\n\n\n\n\n\nThere once was a coder who’d try, To solve R code with a watchful eye. But hints were their game, (“Oh, learning’s so lame!”) “Why think when the answers comply?”\n\n\n\n☠ Hint 1",
    "crumbs": [
      "Home",
      "Exercises",
      "Data cleaning",
      "Exercise 2",
      "Getting started"
    ]
  },
  {
    "objectID": "exercises/exercise3-1.html",
    "href": "exercises/exercise3-1.html",
    "title": "Getting started",
    "section": "",
    "text": "Aims\nIn this exercise you will use ggplot2 and other tools to transform your tidy data frame to an attractive chart. You will geoms as the basic building blocks, Essentially, we will use code to go…\n\n\n\n\n\n\n\nFrom this tidy dataframe…\n\n\nTo this nice chart!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to complete this exercise\nThis first data visualisation exercise is fully guided—just follow the steps and copy-paste the code snippets into your own code file to build up the visualisation code.\nNote that many of the steps are incremental, and involve editing the previous code. For example, in one step you will use this code to plot a simple chart.\n\n\nCode\nggplot(\n  data=df1Clean,\n  aes(x = percent, \n      y = state, \n      fill=status)) + \n  geom_col()\n\n\nIn the next step, you need to add a new library and update the y mapping in aes(). The lines that change are highlighted, as below.\n\n\nCode\nlibrary(forcats)\n\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col()\n\n\nYou should add these new lines in your code to see how the chart is incrementally improved. You could also copy over the whole chunk replacing the previous one in your code, but this is less conducive to learning.\nNotice the  Code button allows you to expand and collapse the code snippets. These are usually not expanded by default, especially for large code sections, so you need to click the button to see the code.",
    "crumbs": [
      "Home",
      "Exercises",
      "Visualisation",
      "Exercise 3",
      "Getting started"
    ]
  },
  {
    "objectID": "exercises/overview.html",
    "href": "exercises/overview.html",
    "title": "Guided exercises",
    "section": "",
    "text": "Now it’s your turn to really get hands-on with the data! Work through the guided exercises below. If you get stuck, refer to the notes or to the examples in the lecture slides. If you can’t get unstuck just raise your hand and someone will be there to help!",
    "crumbs": [
      "Home",
      "Exercises",
      "Data cleaning",
      "Overview"
    ]
  },
  {
    "objectID": "exercises/exercise3-2.html",
    "href": "exercises/exercise3-2.html",
    "title": "Part 1. The base plot",
    "section": "",
    "text": "Figure 1: The goal for Exercise 3\n\n\n\n\n1 Set up your code file meta data\nAs before, start by setting up your code file meta information.\n\nIn RStudio, open the file exercsies/1-code/3-plot-self-assessed-health.R\nUpdate the details in the title box.\n\n\n\n\n2 Load libraries\nRemember to load all your libraries in one place at the top of the script all the libraries you need in a script in one place at the top of the file.\nStart with the libraries below. We’ll need to load more libraries as we go so remember to add them to this section of code.\n\n## Load libraries\nlibrary(dplyr) \nlibrary(ggplot2)\n\n\n\n3 Load your data\nThe data might already be loaded into your R environment, but we should make this step an explicit part of the code.\n\n# Load cleaned data\nload('exercises/3-clean-data/vis1.Rda')\n\n\n\n\n4 Start plotting\nLooking back at Figure 1, we can quickly surmise the main aesthetic mappings in the chart:\n\nx is mapped to percent\ny is mapped to state\nfill is mapped to status\n\nThis is all we need to get a passable plot!\n\n\nCode\nggplot(\n  data=df1Clean,\n  aes(x = percent, y = state, fill=status)) + \n  geom_col()\n\n\n\n\n\n\n\n\n\nThis is a good start for just a few lines of code, but there are a lot of things to fix!\n\n\n\n5 Order the states from most healthy to least healthy\nThe final plot orders the states on the y-axis from most healthy to least healthy. In order to sort the states in this way, we need to create a new variable equal to the sum of the proportions in the categories Excellent and Very good. We can do this using some dplyr code.\n\n# Create variable indicating % very good or excellent health\ndf1Plot &lt;- df1Clean |&gt;\n  group_by(state) |&gt;\n  slice(4:5) |&gt;\n  summarise(totalHealthy = sum(percent)) |&gt;\n  left_join(df1Clean, by = 'state')\n\nThis basically creates the following summary table, and then merges it back to the original dataset, assigning the result to a new dataframe df1Plot.\n\n\n# A tibble: 8 × 2\n  state                        totalHealthy\n  &lt;fct&gt;                               &lt;dbl&gt;\n1 Australian Capital Territory         61.1\n2 New South Wales                      56.6\n3 Northern Territory                   55.5\n4 Queensland                           55.5\n5 South Australia                      55.9\n6 Tasmania                             53.1\n7 Victoria                             61.5\n8 Western Australia                    56.6\n\n\nNow that we have the right variable to sort on, we can use the fct_reorder() function from the forcats package to sort the states directly in the ggplot code. Don’t forget to add library(forcats) to your list of loaded libraries at the top of your script!\n\n\nCode\nlibrary(forcats)\n\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n  fill=status)) + \n  geom_col()\n\n\n\n\n\n\n\n\n\n\n\n\n6 Reverse the order of the health-assessment categories\nNotice that the health categories are currently ordered from Excellent to Poor. we’d like to reverse this so that Poor is on the left and Excellent is on the right. We can do this by setting reverse=TRUE in the position_stack() argument in geom_col().\n\n\nCode\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE))\n\n\n\n\n\n\n\n\n\n\n\n\n7 Customise the colour scheme\nWe’ve done a lot already! Next we will really improve the plot by updating the colour scheme. The default coloring is categorical and the colours don’t carry any meaning. The target plot uses a familiar traffic light colour scheme that also carries meaning (red generally has negative connotations and green generally has positive connotations, in the Anglosphere at least).\n\n\nThe psychological and cultural associations of colors varies across place and time. In 1700s Europe men wore pink as a sign of their wealth and power; today it is almost exclusively a colour associate with girls, so much so that Mattel—the Corporation behind Barbie—have trademark rights to Barbie Pink (Pantone 219C).Here we use green to connote a positive outcome but green is also associated with jealousy (“green with envy”), sickness 🤢, and inexperience (“a greenhorn”). Meanwhile red is the colour of danger, but also of love ❤️ and (in China) an auspicious colour associated with prosperity 🧧.\nWhile we could define our colours manually, the RColorBrewer package provides several colour palettes for R. We will use the brewer.pal() function to access the diverging red-yellow-green (RdYlGn) palette below. Here are the colour hex codes:\n\n# Add the library call to the top of your script!\nlibrary(RColorBrewer)\n\nbrewer.pal(name='RdYlGn', n=5)\n\n[1] \"#D7191C\" \"#FDAE61\" \"#FFFFBF\" \"#A6D96A\" \"#1A9641\"\n\n\nWe can use the function display.brewer.pal to see the actual colours.\n\ndisplay.brewer.pal(name='RdYlGn', n=5)\n\n\n\n\n\n\n\n\nFinally, make sure to save the five colours in an R vector as below.\n\n# Custom bar colours\nbarCols &lt;- RColorBrewer::brewer.pal(5, 'RdYlGn')\n\nNow that we have our five colours stored as a vector we can map these to the health categories using scale_fill_manual(). The legend name doesn’t add much here so we can remove it entirely by setting name = NULL.\n\n\nCode\n# Customise colours\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(name = NULL,\n                    values = barCols)\n\n\n\n\n\n\n\n\n\nAmazing!!\n\n\n\n8 Get rid of the axis labels\nLooking back at Figure 1, notice that the axis labels are deleted entirely. I think that is safe here because the states and territories are obvious, and when we add titles it will be clear that the numbers are percentages.\nA simple way to do this is with the labs() function, but here I will use scale_x_ and scale_y_ functions. This is from habit—often we need to customise aspects of the axes that can only be controlled via the scale_* functions.\n\n\nCode\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL)\n\n\n\n\n\n\n\n\n\n\n\n9 Add a title, subtitle and caption\nAdd a title, subtitle and caption using the labs() function. The final figure colours in some of the words but we will come to that later.\n\n\nCode\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022')\n\n\n\n\n\n\n\n\n\n\n\n\n10 Shift the titles to the right\nNotice that the titles are aligned with the panel area by default, but these can often look better if they are shifted over to the right of the plot. That is easy to do by setting the plot.title.position = 'plot' argument in the theme() function.\n\n\nCode\n# Shift the titles to the right and remove the grey background box\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot'\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n11 Remove the default grey panel background\nTo remove the grey panel background, add the option panel.background = element_blank() to the theme function.\n\n\nCode\n# Remove the grey background\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    panel.background = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n12 Remove the y-axis ticks\nHaving removed the panel background we are left with unsightly y-axis ticks. We can pluck these out like unwanted nostril hairs by including the argument axis.ticks.y = element_blank() in the theme() function.\n\n\nCode\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE),\n           color = \"white\") +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    axis.ticks.y = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nMuch better!\n\n\n13 Add white spacing betweeen the colours\nLooking back at Figure 1, notice that there is thin white line between the colours of the health status categories. The effect is subtle but pleasing. We can control this by setting colour = \"white\" in our call to geom_col().\n\n\nCode\n# White spacing between colours\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE),\n           color = \"white\") +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nThis is looking pretty good! If it was Friday evening you could probably call it a day and leave it at that. But if you’re still full of vim, let’s see if we can text labels to our chart.",
    "crumbs": [
      "Home",
      "Exercises",
      "Visualisation",
      "Exercise 3",
      "Step-by-step guide",
      "Part 1. The base plot"
    ]
  },
  {
    "objectID": "home/index.html",
    "href": "home/index.html",
    "title": "Welcome to the course",
    "section": "",
    "text": "Welcome\nWelcome to Reproducible Data Visualisation with R!\n\n\nHousekeeping\n\n\nPrerequisites",
    "crumbs": [
      "Home",
      "Orientation"
    ]
  },
  {
    "objectID": "exercises/exercise1-1.html",
    "href": "exercises/exercise1-1.html",
    "title": "Getting started",
    "section": "",
    "text": "The End Goal\nLet’s start with the goal in mind! Here it is—a 100% stacked bar chart showing the breakdown of self-rated health status for 8 states and territories.\n\nThe simple chart format is enhanced using techniques covered in this workshop.\n\nOrdering The states and territories on the y-axis are ordered from top to bottom by the proportion of respondents describing their health status as Very good or Excellent.\nColour The chart uses a familiar traffic-light colour scheme, to distinguish between Poor and Excellent self-assessed health.\nText hierarchy The main chart title is an informative title highlighting the key message. A descriptive subtitle explains in more detail what is plotted in the chart while the data source is provided in the footnote.\nAnnotation Text annotations indicate the percentage response for each category. Note that the colour for these labels has been carefully chosen to contrast against the background colour and the labels have been suppressed for the ‘Poor’ category, to avoid overflow.\nStory telling As well as having an informative chart title, the keywords Excellent and Very Good are emphasised with bold font and appropriate colours to help connect the title to the data and reinforce the message.\n\n\n\nThe data\nThe data for this plot come from the National Health Survey (NHS) 2022, a face-to-face interview survey conducted by the Australian Bureau of Statistics (ABS) and designed to collect information on health behaviours, conditions prevalence, and risk factors in Australia. You can read more about the survey on the ABS website here.\nThese data are openly available for download in .xlsx format from the ABS website and a copy is also included in the workshop repo in the file national-health-survey-2022-table-2.xlsx.\n\n\nAims\nIn this exercise you will use dplyr and other tools to read-in and clean the self-assessed health data from the National Health Survey. The raw data is the .xlsx file downloaded from the ABS data. The final output will be a tidy data file in .csv and .Rda format. Essentially, we will use code to go…\n\n\n\n\n\n\n\nFrom this messy excel sheet\n\n\nTo this tidy dataframe!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTidy data\n\n\n\nRemember, in a tidy dataset:\n\nEach variable is a column; each column is a variable.\nEach observation is a row; each row is an observation.\nEach value is a cell; each cell is a single value.\n\nIf you examine the output above you will see this is true for the clean data: there are three columns, and each column is a variable: status, state, and percent. Each row is an observation, telling us the per cent for every state and status combination. Finally, each cell is a single value—there are no merged cells.\nNone of these rules of tidy datasets hold for the original .xlsx file!\nR for Data Science (2nd Edition)\n\n\n\n\nHow to complete this exercise\nThis first exercise is fully guided—just follow the data cleaning steps and copy-paste the code snippets into your own code file to build up a working data cleaning pipeline.\nNote that some steps are incremental, for example Step 6 provides code to filter data.\n\n# Filter to these rows\ndf1Clean &lt;- df1Raw |&gt;\n  filter(X %in% healthStatus)\n\nIn the next step, Step 7, you are given code to select certain variables.\n\n# Append this line to the previous code using |&gt;\nselect(c(X, ends_with(\".1\"), -'Australia.1'))\n\nBut note the comment:\n\nAppend this line to the previous code using |&gt;\n\nThis means that you should append the code in Step 7 to the previous code in Step 6 using the |&gt; operator to connect the two. So after you complete Step 7 the code in your file will look like this:\n\n# Filter to these rows\ndf1Clean &lt;- df1Raw |&gt;\n  filter(X %in% healthStatus) |&gt; \n  select(c(X, ends_with(\".1\"), -'Australia.1'))",
    "crumbs": [
      "Home",
      "Exercises",
      "Data cleaning",
      "Exercise 1",
      "Getting started"
    ]
  },
  {
    "objectID": "exercises/exercise3-3.html",
    "href": "exercises/exercise3-3.html",
    "title": "Part 2. Adding text labels",
    "section": "",
    "text": "1 Overview\nWe have a lot done but more to do. In this section we will work on adding text labels to the stacked column chart\n\n\n\n\n\n\n\n\n\n\n\n(a) Where we are up to\n\n\n\n\n\n\n\n\n\n\n\n(b) The final goal\n\n\n\n\n\n\n\nFigure 1\n\n\n\nIf you have successfully navigated the previous section, your code should look a bit like the code below:\n\n\nCode\n#\n###############################################################\n# Project:  National Health Survey 2022 Analysis\n# Purpose:  Plot self-assessed health data by state\n# Inputs:   exercises/3-clean-data/vis1.Rda\n# Outputs:  exercises/4-outputs/yyyy-mm-dd-self-assessed-health.png\n# Author:   Mark Hanly\n###############################################################\n\n###############\n# Preparation #\n###############\n\n# Load libraries\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(forcats)\nlibrary(RColorBrewer)\n\n# Load cleaned data\nload('exercises/3-clean-data/vis1.Rda')\n\n# Create variable indicating % very good or excellent health\ndf1Plot &lt;- df1Clean |&gt;\n  group_by(state) |&gt;\n  slice(4:5) |&gt;\n  summarise(totalHealthy = sum(percent)) |&gt;\n  left_join(df1Clean, by = 'state')\n\n# Custom bar colours\nbarCols &lt;- RColorBrewer::brewer.pal(5, 'RdYlGn')\n\n#####################\n# Plotting the data #\n#####################\n\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill=status)) + \n  geom_col(position = position_stack(reverse = TRUE),\n           color = \"white\") +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n\n\nYou can copy-paste this code into your script if you want to start from this point in the exercise.\n\n\n\n2 Add text labels\nLet’s dive right in and add text labels using geom_text(). There are two things to be aware of as we do this:\n\ngeom_text() has a required aesthetic label which we have not specified so far. The label aesthetic maps a variable to the text label that appears on the chart; in our case that will be the variable percent. So we will add label = percent to the other aesthetic mappings in aes().\nIn the last section we set position = position_stack(reverse = TRUE) to reverse the order of the health categories in geom_col(). To make sure the labels match the categories we will have to do the same thing here for geom_text().\n\n\n\nCode\n# Add geom_text\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill = status,\n      label = percent)) + \n  geom_col(position = position_stack(reverse = TRUE),\n           color = \"white\") +\n  geom_text(position = position_stack(reverse = TRUE)) +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n3 Format the text labels\nOkay, this is a start but also obviously gross. There are a few arguments we can quickly add to geom_text() to make things look better.\n\nsize = 8/.pt will reduce the font size to 8 points\nhjust = 1.1 will add some horizontal justification, shifting the labels towards the end of their bars\ncolor = grey30 will apply a lighter shade of grey\n\n\n\n.pt is an internal constant in R that allows us to convert millimeters (mm) to point size. In geom_text(), the size is defined in mm. Setting size = 8/.pt is a quick way of figuring how many mm we need to get a font size of 8 points (which is about the smallest font size that can be comfortably read). To test this you can enter 8/.pt at the console.\n\n\nCode\n# Tidy up the text labels\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill = status,\n      label = percent)) + \n  geom_col(position = position_stack(reverse = TRUE),\n           color = \"white\") +\n  geom_text(\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt, \n    hjust = 1.1,\n    color='grey30') +\nscale_fill_manual(name = NULL,\n                  values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n4 Format the labels\nThis is a step in the right direction. Another improvement would be to nicely format the labels so that the number of decimal places is always the same, i.e. 26 should appear as 26.0. We can also add a % symbol so we get 26.0%.\nRather than change the underlying data, we can make both of these changes on the fly in the ggplot code by updating how the label aesthetic is defined. In particular, we will set label = paste0(format(percent, nsmall=1), '%').\n\n\nTo see what this is doing try breaking it into two steps and entering the following at the console:\n\n\nformat(26, nsmall=1)\n\n\npaste0(\"26.0\", \"%\")\n\n\n\n\nCode\n# Format the text labels\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill = status,\n      label = paste0(format(percent, nsmall=1), '%'))) + \n  geom_col(position = position_stack(reverse = TRUE),\n           color = \"white\") +\n  geom_text(\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt, \n    hjust = 1.1,\n    color='grey30') +\n  scale_fill_manual(name = NULL,\n                    values = barCols) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n5 Adjust the colours\nThis is better but there are still a few problems:\n\nThe grey colour of the text labels works quite nicely against the yellow background but not so good against the dark green background.\nThere isn’t really room for text labels for the Poor category.\n\nWe can tackle both of these issues by adjusting the label text colour for each health category. We will customise the text colours choosing ones that contrasts well against the background fill colors. For the Poor category, we will simply set the colour to be transparent.\nA convenient way to choose contrasting colours is to use the lighten() and darken() functions from the colorspace package. These functions take one or more R colours and lighten or darken them by a specified amount. For example, the following code returns #FF6363, a shade of red that is 20% lighter than the original.\n\nlibrary(colorspace)\n\nlighten(\"red\", 0.2)\n\n[1] \"#FF6363\"\n\n\n\n\n\n\n\n\nExpand To Learn More About lighten() and darken()\n\n\n\n\n\nWe can make colors progressively lighter using lighten():\n\n\nCode\n# 6 shades lighter\nlighter6 &lt;- lighten(\"forestgreen\", c(0, .2, .4, .6, .8, 1))\n\n# Visualise the results\nscales::show_col(lighter6)\n\n\n\n\n\n\n\n\n\nWe can make colors progressively darker using darken():\n\n\nCode\n# 6 shades darker\ndarker6 &lt;- darken(\"forestgreen\", c(0, .2, .4, .6, .8, 1))\n\n# Visualise the results\nscales::show_col(darker6)\n\n\n\n\n\n\n\n\n\n\n\n\nAdd the following code snippet to your file, above the ggplot code.\n\n# Move this to the top!\nlibrary(colorspace) \n\n# Custom colors for bar labels \nlabel_text_colors &lt;- c('transparent',\n                       darken(barCols[2], 0.4),\n                       darken(barCols[3], 0.4),\n                       darken(barCols[4], 0.4),\n                       lighten(barCols[5], 0.6))\n\n\nThe first position corresponds to Poor so we set that to transparent.\nThe next three positions correspond to Fair, Good and Very good so we will make the text labels 40% darker.\nThe final position corresponds to Excellent, which is already quite dark so we will make the label colour 60% lighter.\n\nWe can now map the label colours to this new vector by adding scale_colour_manual(\"\", values = label_text_colors). To make this work we will also have to delete color='grey30' from the call to geom_text() and add color = status to aes().\n\n\nCode\n# Adjust label colours\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill = status,\n      color = status,\n      label = paste0(format(percent, nsmall=1), '%'))) + \n  geom_col(position = position_stack(reverse = TRUE),\n           color = \"white\") +\n  geom_text(\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt, \n    hjust = 1.1) +\n  scale_fill_manual(name = NULL, values = barCols) +\n  scale_colour_manual(\"\", values = label_text_colors) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank()\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n6 Remove the legend\nThe labels are looking good but now we have two separate legends, one for the column fill colour and one for the label text colour. We will handle the legend in a later step so for now let’s just get rid of the legend. There are a few ways of doing this but perhaps the easiest is setting legend.position = \"none\" in the theme().\n\n\nCode\n# Remove the legend\nggplot(\n  data=df1Plot,\n  aes(x = percent, \n      y = fct_reorder(state, totalHealthy), \n      fill = status,\n      color = status,\n      label = paste0(format(percent, nsmall=1), '%'))) + \n  geom_col(position = position_stack(reverse = TRUE),\n           color = \"white\") +\n  geom_text(\n    position = position_stack(reverse = TRUE),\n    size = 8/.pt, \n    hjust = 1.1) +\n  scale_fill_manual(name = NULL, values = barCols) +\n  scale_colour_manual(\"\", values = label_text_colors) +\n  scale_y_discrete(NULL) +\n  scale_x_continuous(NULL) +\n  labs(\n    title = 'Victorians most likely to rate their health as Excellent or Very Good',\n    subtitle = 'Self-assessed health status by states and territories',\n    caption = 'Source: National Health Survey, 2022') +\n  theme(\n    plot.title.position = 'plot',\n    panel.background = element_blank(),\n    axis.ticks.y = element_blank(),\n    legend.position = \"none\"\n  )",
    "crumbs": [
      "Home",
      "Exercises",
      "Visualisation",
      "Exercise 3",
      "Step-by-step guide",
      "Part 2. Adding text labels"
    ]
  },
  {
    "objectID": "exercises/exercise1-2.html",
    "href": "exercises/exercise1-2.html",
    "title": "Step-by-step guide",
    "section": "",
    "text": "1 Set up your code file meta data\nIt’s good practice to include some code file meta information in the form of commented text at the top of every code file. This information is to help orientate you to what you were trying to do with this code when you come back to it in the future.\n\nIn RStudio, open the file exercises/1-code/1-clean-self-assessed-health.R\nUpdate the details in the title box. You can edit this to include what you like. Standard items to list include:\n\nA project name and purpose\nThe input file (here exercises/2-raw-data/national-health-survey-2022-table-2.xlsx)\nAny outputs that the code generates (here the output file will be the cleaned data saved in exercises/3-clean-data/vis1.Rda)\nCode author names\n\n\nI tend not to include the date because, assuming you work on the code over time, dates are better captured in Git commits.\n\n\n\n2 Load libraries\nIt is good practice to load all the libraries you need in a script in one place at the top of the file.\nWe will use three libraries to load and clean the ABS data:\n\nreadxl to read the raw .xlsx file into R\ndplyr for data manipulation\ntidyr to pivot the data from wide to long\n\nGo ahead and load all three libraries by adding library() calls to your script, as below.\n\n## Load libraries\nlibrary(readxl) \nlibrary(dplyr) \nlibrary(tidyr) \n\n\n\nNote that you don’t need to wrap the package name in quotation marks when loading the package.\n\n\n\n3 Commit your changes\nStart as you mean to go on and commit your changes to git, then push these to your repo on GitHub.\n\nMake sure to save your changes to the code file\nIn the git panel, tick the box next to exercises/1-code/clean-self-assessed-health.R @Aarathy\n\n\n\n\n\n\nIn the Git panel tick the box then slect commit\n\n\n\nSelect Commit\nWrite a short commit message in the box @Aarathy\n\n\n\n\n\n\nWrite a short commit message then click Push\n\n\n\nClick Push\n\n\n\n\n\n\n\nHow often to commit?\n\n\n\nCommit and push as often as you like! In practice you might find you commit less often near the start of a project, but as he project is close to completion you commit every new change. As you get used to the workflow you will get better at committing discrete, conceptually related changes to your code base.\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nIf you open your GitHub repo in a browser, you should see your recent commit as the latest update.\n\n\n\n\n\n4 Download the data locally\nWith R, it is easy to automate the process of downloading the NHS data directly; no manual point-and-click needed.\n\nAssign the download string to myURL\n\n\n# Spreadsheet url\nmyURL &lt;- \"https://www.abs.gov.au/statistics/health/health-conditions-and-risks/national-health-survey/2022/NHSDC02.xlsx\"\n\n\nDownload the file using download.file() function\n\n\n# Download the file locally\ndownload.file(url = myURL,\n              destfile = 'exercises/2-raw-data/national-health-survey-2022-table-2.xlsx')\n\n\n\nThe destfile argument indicates the file path where the downloaded file is to be saved. Note that it is a relative file path, because you are working in an R project environment.\n\n\n\n\n\n\nCheckpoint\n\n\n\nIf you have run this code successfully, the file national-health-survey-2022-table-2.xlsx should be saved in your exercises/2-raw-data folder. Go ahead and open it—you can do so from within R Studio by going to the Files tab, clicking on the file name and selecting View File. @Aarathy\n\n\n\n\n\n\n\nOpen the downloaded .xlsx file from the Files tab\n\n\n\n\n\n5 Read in the data to R\nWe now have the raw .xlsx file in our project folder. To open the file in R we can use the read_excel() function from the readxl package.\n\n# Read in the raw data\ndf1Raw &lt;- read_excel(\n            path = 'exercises/2-raw-data/national-health-survey-2022-table-2.xlsx',\n            sheet = 'Table 2.3_Proportions',\n            skip = 5,\n            .name_repair = ~ make.names(.x, unique = TRUE)\n          )\n\nThere are a few important arguments we need to specify:\n\npath The path to where you downloaded the .xlsx file raw-data/national-health-survey-2022-table-2.xlsx\nsheet The sheet to read. Here we want to access the data as percentages so we read the sheet Table 2.3_Proportions\nskip Notice in the .xlsx file, the first row of useful data (the state names) is on row six. Setting skip = 5 ensures that the data read starts from row six. The default behaviour is for the variable names to be taken from the first row so the state names become the variable names!\n.name_repair This allows us specify a method to repair the default column names. In particular, because the state names are duplicated, the function make.names(unique=TRUE) ensures they are unique by appending .1 to duplicated names. Thus we have variables NSW and NSW.1, Qld and Qld.1 etc.\n\n\n\nIn the line of code .name_repair = ~ make.names(.x, unique = TRUE) the ~ (tilde) expression is a shorthand for defining a function. .x is a placeholder for the argument passed to the function, which in this case represents the names of the columns that need to be repaired. So ~ make.names(.x, unique = TRUE) is is equivalent to the function\n\nfunction(.x) {\n  make.names(.x, unique = TRUE)\n}\n\nTo get a feel for what this is doing, try entering the following code snippet at the console: make.names(c('Mark', 'Mark'), unique = TRUE)\n\n\n\n\n\n\nCheckpoint\n\n\n\nAll going smoothly, you now have the raw data in your local R environment. You can examine it by clicking on the df1Raw dataframe in the Environment tab. This is a good start but we are still a long way from tidy data!\n\n\nNotice that the first column (named X because it was blank in the raw file) has many different categories corresponding to the first column of the xlsx file. We only want the categories relating to self-assessed health, so filtering them out is the next step.\n\n\n\n\n\nView the df1Raw dataframe in the Environment tab\n\n\n\n\n\n6 Filter to the self-assessed health categories\nAt this point, the dataset df1Raw dataset has 118 rows, but we only need the five rows relating to the five self-assessed health categories: Excellent, Very Good, Good, Fair, and Poor.\nTo filter these rows, we can define a vector with these category names and then use the filter function. We don’t want to edit our raw dataframe, so we will assign the result to a new dataframe df1Clean.\n\n# Define health status categories\nhealthStatus &lt;- c(\"Poor\", \"Fair\", \"Good\", \"Very good\", \"Excellent\")\n\n# Filter to these rows\ndf1Clean &lt;- df1Raw |&gt;\n  filter(X %in% healthStatus)\n\n\n\nIn R, the %in% operator is used to check if elements of one vector are contained in another vector. Try entering 'Ringo' %in% c('John', 'Paul', 'George', 'Ringo') at the console.\n\n\n\n\n\n\nCheckpoint\n\n\n\nAt this point, df1Clean should have 5 observations and 19 variables. You can confirm this by entering dim(df1Clean) at the console.\n\n\n\n\n\n7 Select the columns of interest\nThe original dataset provides proportions and age-standardised proportions. We just need the age-standardised proportions, so the next step is to select the variables of interest. Because the age-standardised data came second, these are the variables named NSW.1, Qld.1 etc. We can select these using select() and the convenience function ends_with() as follows.\n\n# Append this line to the previous code using |&gt;\nselect(c(X, ends_with(\".1\"), -'Australia.1'))\n\n\n\nSo when you append this line your updated code chunk will be\n\n# Filter to these rows\ndf1Clean &lt;- df1Raw |&gt;\n  filter(X %in% healthStatus) |&gt; \n  select(c(X, ends_with(\".1\"), -'Australia.1'))\n\nAs you work through the sections below keep adding the code lines like this!  Note that the code select(c(X, ends_with(\".1\"), -'Australia.1')) says we want to keep (i) the column X, (ii) every column ending in .1 but (iii) not the column Australia.1.\n\n\n\n\n\n\nCheckpoint\n\n\n\nAt this point, df1Clean should have 5 observations and 9 variables. You can confirm this by entering dim(df1Clean) at the console.\n\n\n\n\n\n8 Pivot from wide format to long format\nIf you examine the df1Clean data as it currently stands, there are five rows, one each for each category of health status, and nine columns, the health status plus eight states and territories.\nTo transform to a tidy dataset we need to move from this wide format to a long format with one variable indicating state, one variable indicating health status and one variable indicating percentage. To do this, we will use the pivot_longer() function from the tidyr package.\n\n# Append this line to the previous code using |&gt;\npivot_longer(\n  cols = ends_with(\".1\"),\n  names_to = 'state',\n  values_to = 'percent') \n\nThere are three arguments to the pivot_longer() function here:\n\ncols defines the columns to pivot into longer format. We can choose the eight columns corresponding to the states and territories by using the ends_with() convenience function.\nnames_to specifies the name for the new column to create from the information stored in the column names of data specified by cols.\n\nvalues_to is the name of the column to create from the data stored in cell values.\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nAt this point, df1Clean should have 40 observations and 3 variables. You can confirm this by entering dim(df1Clean) at the console. Check the names by entering names(df1Clean) at the console; it should return X, state, and percent.\n\n\n\n\n\n9 Rename the variable X\nX isn’t a very informative variable name so let’s rename it to something more descriptive using the rename() function.\n\n# Append this line to the previous code using |&gt;\nrename(status = X)\n\n\n\nRemember the syntax is rename(newName = oldName)\n\n\n\n10 Tidy up the state variable\nThe state variable is in an awful state. First of all, the state names still have the .1 suffix (NSW.1 etc). Secondly, it is a character vector, but for plotting purposes its going to be better to have this as a factor variable. We can create a better version of the state variable using mutate(), combined with as.factor() to make our new variable a factor variable.\n\n# Append this code to the previous code using |&gt;\nmutate(\n    state = factor(\n      case_when (\n        state == 'NSW.1' ~ 'New South Wales',\n        state == 'Vic..1' ~ 'Victoria',\n        state == 'Qld.1' ~ 'Queensland',\n        state == 'SA.1' ~ 'South Australia',\n        state == 'WA.1' ~ 'Western Australia',\n        state == 'Tas..1' ~ 'Tasmania',\n        state == 'NT.1' ~ 'Northern Territory',\n        state == 'ACT.1' ~ 'Australian Capital Territory'\n      ))) \n\n\n\nNote that we overwrote the original state variable with a new version. Here it is okay because we are using code to create a new dataset leaving the original intact, but obviously you should never overwrite variables in the canonical version of your data!\n\n\n\n\n\n\nCheckpoint\n\n\n\nYou can confirm that the new state variable is a factor variable by entering is.factor(df1Clean$state) at the console. You can also confirm the levels of the new factor variable by entering levels(df1Clean$state). Note that because we didn’t specify any levels, they are ordered alphabetically by default.\n\n\n\n\n\n11 Tidy up the status variable\nThings are looking good now! One additional change is that it will be useful later to code the status variable as a factor. We can do that with another call to mutate().\n\n# Append this code to the previous code using |&gt;\nstatus = factor(status, levels = healthStatus)\n\nHere we have also set the levels option to healthStatus which we defined way back in Step 6 as the vector c(\"Poor\", \"Fair\", \"Good\", \"Very good\", \"Excellent\"). This ensures that when we plot the data the categories will have a sensible sorting from Poor health to Excellent health. If we didn’t do this they would default to being sorted alphabetically and appear on the plot in the wrong order (Excellent to Very good).\n\n\nHere we have separated the steps of coding state and status as factor variables into two separated calls to mutate(). It is also possible to create multiple variables in a single mutate() call so Steps 9 and 10 could be completed in a single step as\n\n  mutate(\n    state = factor(\n      case_when (\n        state == 'NSW.1' ~ 'New South Wales',\n        state == 'Vic..1' ~ 'Victoria',\n        state == 'Qld.1' ~ 'Queensland',\n        state == 'SA.1' ~ 'South Australia',\n        state == 'WA.1' ~ 'Western Australia',\n        state == 'Tas..1' ~ 'Tasmania',\n        state == 'NT.1' ~ 'Northern Territory',\n        state == 'ACT.1' ~ 'Australian Capital Territory'\n      )),\n    status = factor(status, levels = healthStatus)\n  )\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nYou can confirm that the new status variable is a factor variable by entering is.factor(df1Clean$status) at the console. You can also confirm the levels of the new factor variable by entering levels(df1Clean$status). The category levels should appear in increasing order from Poor to Excellent, not alphabetically.\n\n\n\n\n\n12 Sort the data\nWe are done! The dataset is in tidy data format and the categorical variables are nicely coded as factors. Currently the dataset is sorted by status first and then by state; it is easier to read if sorted by state, which we can quickly do with the arrange function.\n\n# Append this code to the previous code using |&gt;\narrange(state, status)\n\n\n\n13 Save the clean data\nHaving gone to all that effort to clean the data, we definitely want to save it! We will save it in two formats: an R data file .Rda for working in R and a plain old .csv which is a good option if you want to share the data underlying your chart with non-R users.\nAdd the following blocks of code to your script to save the df1Clean file in your exercises/3-clean-data folder.\n\n# Save the data in .Rda format\nsave(df1Clean, file=here::here('exercises/3-clean-data/vis1.Rda'))\n\n\n# Save the data in .csv format\nwrite.csv(df1Clean,\n          file=here::here('exercises/3-clean-data/vis1.csv'),\n          row.names = FALSE)\n\n\n\nNote we are using the here() function from the here package to determine the root folder of the R project. Try entering here::here() at the console to confirm the location is where you expect.\n\n\n\n\n\n\nCheckpoint\n\n\n\nNow that you’ve completed your cleaning code, you should test everything runs smoothly. Save your file then restart your R session by clicking on Session &gt; Restart R.\nHighlight the full R Script (Cmd/Ctrl + A) then run everything that is highlighted (Cmd/Ctrl + Enter). The whole data cleaning pipeline should run and the clean data file should update every time you run this.\nLook out for errors in the console: if you left out a step or completed it in interactively in the console and didn’t save the code then the code will break.\nIf you are happy with everything remember to Git commit and push your code.\n\n\n\n\nCongratulations, you made it!!\n\n\n\nvia GIPHY",
    "crumbs": [
      "Home",
      "Exercises",
      "Data cleaning",
      "Exercise 1",
      "Step-by-step guide"
    ]
  },
  {
    "objectID": "exercises/exercise2-2.html",
    "href": "exercises/exercise2-2.html",
    "title": "Step-by-step guide",
    "section": "",
    "text": "1 Set up your code file meta data\nAs before, you should your code file with some meta information in the form of commented out text.\n\n\n☠ Hint 1\n\n\n\n\nInclude similar information to last time: the project name and purpose, and the code inputs and outputs.\n\n\n☠ Hint 1\n\n\n\n\n\n\n\n2 Load libraries\nLoad all of your libraries in a single location at the top of the file.\n\n\n☠ Hint 2\n\n\n\n\nStart with the three libraries from the last exercise: readxl, dplyr, and tidyr.\n\n\n☠ Hint 2\n\n\n\n\n\n\n\n3 Commit your changes\nRemember it is good practice to commit your changes regularly. You can do that now.\n\n\n☠ Hint 3\n\n\n\n\nThis isn’t essential but it’s good to get into the practice. You don’t have to push every time you commit.\n\n\n☠ Hint 3\n\n\n\n\n\n\n\n4 Download the data locally\nDownload the raw data using the ABS website link below and the download.file() function.\nhttps://www.abs.gov.au/statistics/health/health-conditions-and-risks/national-health-survey/2022/NHSDC01.xlsx\n\n\n☠ Hint 4\n\n\n\n\nUse the same code as before. Remember to update the URL and destination file name.\n\n# Spreadsheet url\nmyURL &lt;- \" \"\n\n# Download the file locally\ndownload.file(\n  url = , \n  destfile = \" \")\n\n\n\n☠ Hint 4\n\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nYou should see the .xlsx spreadsheet downloaded into your exercises/2-raw-data folder.\n\n\n\n\n\n5 Read in the data to R\nRead in the raw data from the sheet Table 1.3_Proportions using the read_excel() function. Remember the same key arguments from last time:\n\npath Where you have downloaded the excel file\nsheet The sheet you want to read from\nskip The number of lines to skip before reading\n.name_repair the function to make names unique\n\n\n\n☠ Hint 5\n\n\n\n\nUse the same code as before. Check in the excel file how many rows you want to skip so that the years (2001 2004–05 etc) are the first row of data.\n\n# Read in the raw data\ndf2Raw &lt;- read_excel(\n  path = \" \",\n  sheet = \" \",\n  skip = ,\n  .name_repair =  \n)\n\n\n\n☠ Hint 5\n\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nYou should be able to see the data frame in your R Environment pane. Check that it has 130 rows and 15 variables.\n\n\n\n\n\n6 Subset to the 12 rows with data on chronic conditions\nStart your data cleaning by filtering to the rows that contain the chronic conditions (arthritis, asthma etc). These should be in rows 12 to 23 (but check in your data).\n\n\n☠ Hint 6\n\n\n\n\nUse the slice() function to subset to the rows you need, for example, this would subset to rows 4 to 6.\n\n# Clean the raw data\ndf2Clean &lt;- df2Raw |&gt;\n  slice(4:6)\n\n\n\n☠ Hint 6\n\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nYour dataframe should have 12 rows, one for each chronic condition.\n\n\n\n\n\n7 Select the columns of interest\nSelect the first column (with the chronic conditions) and the columns with age-standardised proportions. If you specified .name_repair = ~ make.names(.x, unique = TRUE) then the columns with age-standardised proportions will all end with .1.\n\n\n☠ Hint 7\n\n\n\n\nAs before, use select() to select the variables you want to keep. ends_with() is a useful function to select multiple variables with the same name.\nFor example, this would select the variables species, bill_length_mm and flipper_length_mm from the penguins dataset.\n\n# Select\nlibrary(palmerpenguins)\n\npenguins |&gt; \nselect(c(species, ends_with(\"length_mm\")))\n\n\n\n☠ Hint 7\n\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nYour dataframe should have 8 variables: the column of chronic conditions and the 7 date columns.\n\n\n\n\n\n8 Pivot from wide format to long format\nCurrently we are in wide format, with one column for each survey period, and the proportions in the cells. We need to move to long format with a single column for the survey period and a single column for the percentages.\nWe can achieve this using pivot_longer(). Remember, there are a few important arguments:\n\ncols The variables we want to stack when we move from wide to long, i.e. the variables that are the survey periods ending in .1.\nnames_to The name of the new variable containing the survey periods.\nvalues_to The name of the new variable containing the percentages\n\n\n\n☠ Hint 8\n\n\n\n\nThis step is tricky. If you copied the approach from last time you may well have encountered the error ! Can’t combine X2001.1  and X2022.1 \nThis arises because some of the columns were read in as numeric while others were read in as character (the character columns had the text “na” somewhere in the original spreadsheet). Trying to stack character variables on top of numeric variables causes problems.\nTo get around this, we need to add the values_transform = as.numeric argument in pivot_longer(). This argument makes sure all of the variables are numeric when they are stacked.\n\n# Pivot longer\npivot_longer(\n  cols = ends_with(\".1\"),\n  names_to = 'period',\n  values_to = 'percent',\n  values_transform = as.numeric) \n\n\n\n☠ Hint 8\n\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nAll going well you should have 84 rows (12 conditions \\(\\times\\) 7 survey periods) and three columns: X, period and percent.\nDon’t worry if you get a warning message about NAs. Some of the time series are missing data, for example there is no data point for diabetes in 2004-05.\n\n\n\n\n\n9 Rename the variable X\nWe still have the unsightly variable name X. Go ahead and rename it to condition.\n\n\n☠ Hint 9\n\n\n\n\nRemember the syntax\n\n# Rename\nrename(newName = oldName)\n\n\n\n☠ Hint 9\n\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nYou’re doing great!\n\n\n\n\n\n10 Tidy up the period variable\nThis is a tricky step so the full solution is outlined below. Among other things we encounter dates for the first time.\nThe period variable refers to the survey period, but it is a bit of a disaster with entries like X2001.1 and X2004.05.1. We need to tidy it up to have nicely formatted dates instead of these weird strings.\n\n\n☠ Hint 10\n\n\n\n\n\n\n\nThat was pretty full on so there is no hint beyond the code in the instructions. You got this like Molly got her ball.\n\n\n\n\n☠ Hint 10\n\n\n\n\nReferring back to the original spreadsheet, these dates refer to single calendar years (for 2001 and 2022) and multiple calendar years like 2004-05 and 2007-08.\nWhile the survey collection period naturally spanned months or years, for the purpose of plotting we want to be able to choose a single date. For whole years, we will choose the mid-year point i.e. July 1. For survey periods that spanned multiple years we will choose the first day of the second year, i.e. January 1. To summarise, we want to assign the survey periods to specific dates as follows.\n\n2001 \\(\\rightarrow\\) 01/07/2001\n2004-05 \\(\\rightarrow\\) 01/01/2005\n2007-08 \\(\\rightarrow\\) 01/01/2008\n2011-12 \\(\\rightarrow\\) 01/01/2012\n2014-15 \\(\\rightarrow\\) 01/01/2015\n2017-18 \\(\\rightarrow\\) 01/01/2018\n2022 \\(\\rightarrow\\) 01/07/2022\n\nWe could hard code this, but noticing there are only two date formats we can also use an ifelse() function, with one rule for single year dates like X2001.1 and a second rule for multiple year dates like X2004.05.1\nHere’s what the code looks like.\n\n  mutate(\n    date = as.Date(\n      ifelse(nchar(period)==7,\n             paste(as.numeric(substr(period, 2, 5)), '07', '01', sep='-'),\n             paste(as.numeric(substr(period, 2, 5)) + 1, '01', '01', sep='-'))\n    ))\n\nThere’s a few things going on so let’s break it down.\n\nWe start with mutate(date = as.Date(...)) to create a new variable named date that has a date format. The as.Date() function converts strings that look like dates to actual Date objects in R. Try entering as.Date(\"2024-11-21\") in the console for example.\nInside the as.Date() function we are calling ifelse(). The logical condition that is tested is whether the period string has 7 characters. So this will be TRUE for the string X2001.1 but false for the string X2004.05.1. You can test this yourself by entering nchar(\"X2001.1\") at the console.\nFor dates like X2001.1 the rule is paste(as.numeric(substr(period, 2, 5)), '07', '01', sep='-'). This extracts the year and combines it with the strings “07” and “01”, separated by “-”. The result is something like “2001-07-01”. To see this in action, try entering paste(as.numeric(substr(\"X2001.1\", 2, 5)), '07', '01', sep='-') at the console.\nFor dates like X2004.05.1 the rule is paste(as.numeric(substr(period, 2, 5)) + 1, '01', '01', sep='-'). This extracts the first year, adds 1 then combines it with the strings “01” and “01”, separated by “-”. The result is something like “2005-01-01”. To see this in action, try entering paste(as.numeric(substr(\"X2007.08.1\", 2, 5)) + 1, '01', '01', sep='-') at the console.\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nIf run successfully, you should now have a new variable named date, which is also formatted as a date object. You can test this by entering is the is.Date() function from the lubridate package. Try entering the following at the console.\n\nlubridate::is.Date(df2Clean$date)\n\n\n\n\n\n\n11 Tidy up the condition variable\nThe categories of the chronic conditions still include footnotes, like Arthritis(d), or long names like Cancer (malignant neoplasms). When we come to plot these we are going to want the labels to be relatively short so we will tidy these up now.\nUse mutate() and case when() to create shorter and tidier category names for the condition variable.\n\n\n☠ Hint 11\n\n\n\n\n\nmutate(\n    condition = case_when(\n      condition==\"Arthritis(d)\" ~ \" \",\n      condition==\"Asthma\" ~ \" \",\n      condition==\"Back problems (dorsopathies)(e)\" ~ \" \",\n      condition==\"Cancer (malignant neoplasms)\" ~ \" \",\n      condition==\"Chronic obstructive pulmonary disease (COPD)(f)\" ~ \" \",\n      condition==\"Diabetes mellitus(g)\" ~ \" \",\n      condition==\"Hayfever and allergic rhinitis\" ~ \" \",\n      condition==\"Heart, stroke and vascular disease(h)\"  ~ \" \",\n      condition==\"Hypertension(i)\" ~ \" \",\n      condition==\"Kidney disease(j)\" ~ \" \",\n      condition==\"Mental and behavioural conditions(k)(l)(m)\" ~ \" \",\n      condition==\"Osteoporosis(n)\" ~ \" \"\n    )\n  )\n\n\n\n☠ Hint 11\n\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nIf you view your dataframe, the categories in the updated condition name should look short and neat. You can check the length of the longest variable by pasting the code below at the console.\n\nmax(nchar(df2Clean$condition))\n\n\n\n\n\n\n12 Drop the old variable period\nNow that we have a nicely formatted date variable we won’t need the old variable period so go ahead and drop that.\n\n\n☠ Hint 12\n\n\n\n\nRemember to drop a variable you can use select() with - in front of the variable name. For example this would drop the variable speed from the cars dataset.\n\ncars |&gt; \n  select(-speed)\n\n\n\n☠ Hint 12\n\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nYour tidy dataset should have 84 rows and three variables: condition, date, and percent.\n\n\n\n\n\n13 Save the clean dataset\nAmazing, you made it! The final step is to save the clean dataset locally. We can follow the code from Exercise 1 to save it in both .Rda and .csv format, using save() and write.csv() respectively.\n\n\n☠ Hint 13\n\n\n\n\nFollow the code from last time, but remember to update the file names!\n\n# Save the data in .Rda format\nsave(XXX, file = )\n\n# Save the data in .csv format\nwrite.csv(XXX,\n          file = ,\n          row.names = FALSE)\n\n\n\n☠ Hint 13\n\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nYour tidy dataset should have 84 rows and three variables: condition, date, and percent.\n\n\n\n\nCongratulations, you made it!!\n\n\n\nvia GIPHY",
    "crumbs": [
      "Home",
      "Exercises",
      "Data cleaning",
      "Exercise 2",
      "Step-by-step guide"
    ]
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-challenge",
    "href": "lectures/lecture-git-github.html#the-challenge",
    "title": "Version control with git and GitHub",
    "section": "The challenge",
    "text": "The challenge\nAs data analysts, we produce a lot of files\n\ncode\nfigures\ntables\nreports\n\nOrganising these files is an important, albeit often unglamorous, part of our job."
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-challenge-1",
    "href": "lectures/lecture-git-github.html#the-challenge-1",
    "title": "Version control with git and GitHub",
    "section": "The Challenge",
    "text": "The Challenge\nManaging versions What do you do with old code?\nEnsuring reproducibility Can others reproduce your results? What about your future self?\nFacilitating collaboration Can other team members easily contribute?"
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-old-school-solution",
    "href": "lectures/lecture-git-github.html#the-old-school-solution",
    "title": "Version control with git and GitHub",
    "section": "The old school solution 🛵",
    "text": "The old school solution 🛵\nThe old school solution combines many practical strategies:\n\n\nUsing file naming conventions to track different file versions\n\nanalysis-16jun2024.do\nanalysis-19jun2024-mh.do\nanalysis-final.do\nanalysis-final-final.do\n\nNote changes directly in code comments or separate documentation\nUse shared folders, google drive etc\nShare code and code snippets over email, slack etc"
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-old-school-solution-1",
    "href": "lectures/lecture-git-github.html#the-old-school-solution-1",
    "title": "Version control with git and GitHub",
    "section": "The old school solution 🛵",
    "text": "The old school solution 🛵\n\nThis is ok(ish) for one person working on a small project. But if the project is large, involves many people or goes on for a long time this approach very quickly breaks down"
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-new-school-solution",
    "href": "lectures/lecture-git-github.html#the-new-school-solution",
    "title": "Version control with git and GitHub",
    "section": "The new school solution 🚀",
    "text": "The new school solution 🚀\nThe new school solution is to use dedicated version control software.\nThere are a few options out there but by far the most popular choice is the combination of git + GitHub"
  },
  {
    "objectID": "lectures/lecture-git-github.html#section",
    "href": "lectures/lecture-git-github.html#section",
    "title": "Version control with git and GitHub",
    "section": "",
    "text": "Via git-scm.com\n\n\nGit is software for tracking different versions of code files you are working on locally.\n\n\n\nVia logos-world.net\n\n\nGitHub is a cloud-based platform for sharing and collaborating on projects managed with Git"
  },
  {
    "objectID": "lectures/lecture-git-github.html#how-does-it-work",
    "href": "lectures/lecture-git-github.html#how-does-it-work",
    "title": "Version control with git and GitHub",
    "section": "How does it work?",
    "text": "How does it work?\nCommitting, branching and merging with Git"
  },
  {
    "objectID": "lectures/lecture-git-github.html#how-does-it-work-1",
    "href": "lectures/lecture-git-github.html#how-does-it-work-1",
    "title": "Version control with git and GitHub",
    "section": "How does it work?",
    "text": "How does it work?\nCommitting, branching and merging with Git"
  },
  {
    "objectID": "lectures/lecture-git-github.html#how-does-it-work-2",
    "href": "lectures/lecture-git-github.html#how-does-it-work-2",
    "title": "Version control with git and GitHub",
    "section": "How does it work?",
    "text": "How does it work?\nSharing versions with GitHub\n\n\n\n\nBack"
  },
  {
    "objectID": "lectures/lectures.html",
    "href": "lectures/lectures.html",
    "title": "Lectures",
    "section": "",
    "text": "View slides in full screen\n\n\n  Orientation to RStudio \n\n\n\n  Version control with git and GitHub \n\n\n\n  Data cleaning with dplyr and friends \n\n\n\n  Visualising data with ggplot2 \n\n\n\n  Literate programming with RMarkdown",
    "crumbs": [
      "Home",
      "Lectures",
      "Lectures"
    ]
  }
]