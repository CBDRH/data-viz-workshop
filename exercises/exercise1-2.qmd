---
title: "Step-by-step guide"
format: 
  html:
    execute:
      echo: true
      eval: false 
number-sections: true      
---

# Set up your code file meta data

It's good practice to include some code file meta information in the form of commented text at the top of every code file. This information is to help orientate you to what you were trying to do with this code when you come back to it in the future.

1. In RStudio, open the file `exercises/1-code/1-clean-self-assessed-health.R`
2. Update the details in the title box. You can edit this to include what you like. Standard items to list include: 
    - A project name and purpose
    - The input file (here `exercises/2-raw-data/national-health-survey-2022-table-2.xlsx`)
    - Any outputs that the code generates (here the output file will be the cleaned data saved in `exercises/3-clean-data/vis1.Rda`)
    - Code author names

I tend not to include the date because, assuming you work on the code over time, dates are better captured in Git commits.  

<hr>


# Load libraries

It is good practice to load all the libraries you need in a script in one place at the top of the file. 

We will use three libraries to load and clean the ABS data: 

1. `readxl` to read the raw `.xlsx` file into R
1. `dplyr` for data manipulation 
1. `tidyr` to pivot the data from wide to long

Go ahead and load all three libraries by adding `library()` calls to your script, as below. 

```{r}
## Load libraries
library(readxl) 
library(dplyr) 
library(tidyr) 
```

::: {.aside} 

Note that you don't need to wrap the package name in quotation marks when loading the package.

:::

<hr>

# Commit your changes

Start as you mean to go on and commit your changes to git, then push these to your repo on GitHub.

1. Make sure to save your changes to the code file
2. In the git panel, tick the box next to `exercises/1-code/clean-self-assessed-health.R` @Aarathy

::: {.aside}
![In the Git panel tick the box then slect commit](../images/screenshot-placeholder.png)
:::

3. Select Commit
4. Write a short commit message in the box @Aarathy

::: {.aside}
![Write a short commit message then click Push](../images/screenshot-placeholder.png)
:::

5. Click Push


::: {.callout-tip}

## How often to commit?

Commit and push as often as you like! In practice you might find you commit less often near the start of a project, but as he project is close to completion you commit every new change. As you get used to the workflow you will get better at committing discrete, conceptually related changes to your code base.

:::

::: {.callout-caution}

## Checkpoint

If you open your GitHub repo in a browser, you should see your recent commit as the latest update. 

:::

<hr>

# Download the data locally

With R, it is easy to automate the process of downloading the NHS  data directly; no manual point-and-click needed.

1. Assign the download string to `myURL`

```{r}
# Spreadsheet url
myURL <- "https://www.abs.gov.au/statistics/health/health-conditions-and-risks/national-health-survey/2022/NHSDC02.xlsx"

```
    

2. Download the file using `download.file()` function

```{r}
# Download the file locally
download.file(url = myURL,
              destfile = 'exercises/2-raw-data/national-health-survey-2022-table-2.xlsx')
```

::: {.aside}

The `destfile` argument indicates the file path where the downloaded file is to be saved. Note that it is a relative file path, because you are working in an R project environment.

:::

::: {.callout-caution}

## Checkpoint
If you have run this code successfully, the file `national-health-survey-2022-table-2.xlsx` should be saved in your `exercises/2-raw-data` folder. Go ahead and open it---you can do so from within R Studio by going to the **Files** tab, clicking on the file name and selecting **View File**. @Aarathy

:::

::: {.aside}

![Open the downloaded `.xlsx` file from the Files tab ](../images/screenshot-placeholder.png)

:::

<hr> 

# Read in the data to R

We now have the raw `.xlsx` file in our project folder. To open the file in R we can use the `read_excel()` function from the `readxl` package. 

```{r}
# Read in the raw data
df1Raw <- read_excel(
            path = 'exercises/2-raw-data/national-health-survey-2022-table-2.xlsx',
            sheet = 'Table 2.3_Proportions',
            skip = 5,
            .name_repair = ~ make.names(.x, unique = TRUE)
          )
```

There are a few important arguments we need to specify:

* `path` The path to where you downloaded the `.xlsx` file **raw-data/national-health-survey-2022-table-2.xlsx**
* `sheet` The sheet to read. Here we want to access the data as percentages so we read the sheet **Table 2.3_Proportions**
* `skip` Notice in the `.xlsx` file, the first row of useful data (the state names) is on row six. Setting `skip = 5` ensures that the data read starts from row six. The default behaviour is for the variable names to be taken from the first row so the state names become the variable names!
* `.name_repair` This allows us specify a method to repair the default column names. In particular, because the state names are duplicated, the function `make.names(unique=TRUE)` ensures they are unique by appending `.1` to duplicated names. Thus we have variables `NSW` and `NSW.1`, `Qld` and `Qld.1` etc. 

::: {.aside}

In the line of code `.name_repair = ~ make.names(.x, unique = TRUE)` the `~` (tilde) expression is a shorthand for defining a function. `.x` is a placeholder for the argument passed to the function, which in this case represents the names of the columns that need to be repaired. So `~ make.names(.x, unique = TRUE)` is is equivalent to the function
```{r}
function(.x) {
  make.names(.x, unique = TRUE)
}
```

To get a feel for what this is doing, try entering the following code snippet at the console: `make.names(c('Mark', 'Mark'), unique = TRUE)`

:::

::: {.callout-caution}

## Checkpoint

All going smoothly, you now have the raw data in your local R environment. You can examine it by clicking on the `df1Raw` dataframe in the Environment tab. This is a good start but we are still a long way from tidy data!

:::

Notice that the first column (named `X` because it was blank in the raw file) has many different categories corresponding to the first column of the `xlsx` file. We only want the categories relating to self-assessed health, so filtering them out is the next step.

::: {.aside}
![View the `df1Raw` dataframe in the Environment tab](../images/screenshot-placeholder.png)
:::

<br>

# Filter to the self-assessed health categories

At this point, the dataset `df1Raw` dataset has 118 rows, but we only need the five rows relating to the five self-assessed health categories: Excellent, Very Good, Good, Fair, and Poor.

To filter these rows, we can define a vector with these category names and then use the filter function. We don't want to edit our raw dataframe, so we will assign the result to a new dataframe `df1Clean`. 

```{r}
# Define health status categories
healthStatus <- c("Poor", "Fair", "Good", "Very good", "Excellent")

# Filter to these rows
df1Clean <- df1Raw |>
  filter(X %in% healthStatus)
```

::: {.aside}
In R, the `%in%` operator is used to check if elements of one vector are contained in another vector. Try entering `'Ringo' %in% c('John', 'Paul', 'George', 'Ringo')` at the console.
:::


::: {.callout-caution}

## Checkpoint
At this point, `df1Clean` should have 5 observations and 19 variables. You can confirm this by entering `dim(df1Clean)` at the console.

:::

<hr>

# Select the columns of interest

The original dataset provides proportions and age-standardised proportions. We just need the age-standardised proportions, so the next step is to select the variables of interest. Because the age-standardised data came second, these are the variables named `NSW.1`, `Qld.1` etc. We can select these using `select()` and the convenience function `ends_with()` as follows. 

```{r}
# Append this line to the previous code using |>
select(c(X, ends_with(".1"), -'Australia.1'))
```

::: {.aside}

So when you append this line your updated code chunk will be

```{r}
# Filter to these rows
df1Clean <- df1Raw |>
  filter(X %in% healthStatus) |> 
  select(c(X, ends_with(".1"), -'Australia.1'))
```


As you work through the sections below keep adding the code lines like this! 
<br><br>
Note that the code `select(c(X, ends_with(".1"), -'Australia.1'))` says we want to keep (i) the column `X`, (ii) every column ending in `.1` but (iii) _not_ the column `Australia.1`. 

:::

::: {.callout-caution}

## Checkpoint
At this point, `df1Clean` should have 5 observations and 9 variables. You can confirm this by entering `dim(df1Clean)` at the console.

:::

<hr>

# Pivot from wide format to long format

If you examine the `df1Clean` data as it currently stands, there are five rows, one each for each category of health status, and nine columns, the health status plus eight states and territories. 

To transform to a tidy dataset we need to move from this **wide** format to a **long** format with one variable indicating state, one variable indicating health status and one variable indicating percentage. To do this, we will use the `pivot_longer()` function from the `tidyr` package.

```{r}
# Append this line to the previous code using |>
pivot_longer(
  cols = ends_with(".1"),
  names_to = 'state',
  values_to = 'percent') 
```

There are three arguments to the `pivot_longer()` function here:

* `cols` defines the columns to pivot into longer format. We can choose the eight columns corresponding to the states and territories by using the `ends_with()` convenience function.
* `names_to` specifies the name for the new column to create from the information stored in the column names of data specified by `cols`.  
* `values_to` is the name of the column to create from the data stored in cell values.

::: {.callout-caution}

## Checkpoint

At this point, `df1Clean` should have 40 observations and 3 variables. You can confirm this by entering `dim(df1Clean)` at the console. Check the names by entering `names(df1Clean)` at the console; it should return `X`, `state`, and `percent`. 
:::

<hr>

# Rename the variable `X`

`X` isn't a very informative variable name so let's rename it to something more descriptive using the `rename()` function. 

```{r}
# Append this line to the previous code using |>
rename(status = X)
```

::: {.aside}
Remember the syntax is `rename(newName = oldName)`
:::

<hr>

# Tidy up the `state` variable

The `state` variable is in an awful state. First of all, the state names still have the `.1` suffix (NSW.1 etc). Secondly, it is a character vector, but for plotting purposes its going to be better to have this as a factor variable. We can create a better version of the `state` variable using `mutate()`, combined with `as.factor()` to make our new variable a factor variable.

```{r}
# Append this code to the previous code using |>
mutate(
    state = factor(
      case_when (
        state == 'NSW.1' ~ 'New South Wales',
        state == 'Vic..1' ~ 'Victoria',
        state == 'Qld.1' ~ 'Queensland',
        state == 'SA.1' ~ 'South Australia',
        state == 'WA.1' ~ 'Western Australia',
        state == 'Tas..1' ~ 'Tasmania',
        state == 'NT.1' ~ 'Northern Territory',
        state == 'ACT.1' ~ 'Australian Capital Territory'
      ))) 

```

::: {.aside}

Note that we overwrote the original `state` variable with a new version. Here it is okay because we are using code to create a new dataset leaving the original intact, but obviously you should never overwrite variables in the canonical version of your data!

:::

::: {.callout-caution}

## Checkpoint

You can confirm that the new `state` variable is a factor variable by entering `is.factor(df1Clean$state)` at the console. You can also confirm the levels of the new factor variable by entering `levels(df1Clean$state)`. Note that because we didn't specify any levels, they are ordered alphabetically by default.
:::

<hr>


# Tidy up the `status` variable

Things are looking good now! One additional change is that it will be useful later to code the `status` variable as a factor. We can do that with another call to `mutate()`. 

```{r}
# Append this code to the previous code using |>
status = factor(status, levels = healthStatus)
```

Here we have also set the `levels` option to `healthStatus` which we defined way back in Step 6 as the vector `c("Poor", "Fair", "Good", "Very good", "Excellent")`. This ensures that when we plot the data the categories will have a sensible sorting from **Poor** health to **Excellent** health. If we didn't do this they would default to being sorted alphabetically and appear on the plot in the wrong order (**Excellent** to **Very good**).

::: {.aside}

Here we have separated the steps of coding `state` and `status` as factor variables into two separated calls to `mutate()`. It is also possible to create multiple variables in a single `mutate()` call so Steps 9 and 10 could be completed in a single step as

```{r}
  mutate(
    state = factor(
      case_when (
        state == 'NSW.1' ~ 'New South Wales',
        state == 'Vic..1' ~ 'Victoria',
        state == 'Qld.1' ~ 'Queensland',
        state == 'SA.1' ~ 'South Australia',
        state == 'WA.1' ~ 'Western Australia',
        state == 'Tas..1' ~ 'Tasmania',
        state == 'NT.1' ~ 'Northern Territory',
        state == 'ACT.1' ~ 'Australian Capital Territory'
      )),
    status = factor(status, levels = healthStatus)
  )
```


:::

::: {.callout-caution}

## Checkpoint

You can confirm that the new `status` variable is a factor variable by entering `is.factor(df1Clean$status)` at the console. You can also confirm the levels of the new factor variable by entering `levels(df1Clean$status)`. The category levels should appear in increasing order from **Poor** to **Excellent**, not alphabetically.
:::

<hr>

# Sort the data

We are done! The dataset is in tidy data format and the categorical variables are nicely coded as factors. Currently the dataset is sorted by `status` first and then by `state`; it is easier to read if sorted by `state`, which we can quickly do with the arrange function.

```{r}
# Append this code to the previous code using |>
arrange(state, status)
```

# Save the clean data

Having gone to all that effort to clean the data, we definitely want to save it! We will save it in two formats: an R data file `.Rda` for working in R and a plain old `.csv` which is a good option if you want to share the data underlying your chart with non-R users.

Add the following blocks of code to your script to save the `df1Clean` file in your `exercises/3-clean-data` folder.

```{r}
# Save the data in .Rda format
save(df1Clean, file=here::here('exercises/3-clean-data/vis1.Rda'))
```

```{r}
# Save the data in .csv format
write.csv(df1Clean,
          file=here::here('exercises/3-clean-data/vis1.csv'),
          row.names = FALSE)
```

::: {.aside}

Note we are using the `here()` function from the `here` package to determine the root folder of the R project. Try entering `here::here()` at the console to confirm the location is where you expect.

:::

::: {.callout-caution}

## Checkpoint

Now that you've completed your cleaning code, you should test everything runs smoothly. Save your file then restart your R session by clicking on **Session > Restart R**. 

Highlight the full R Script (Cmd/Ctrl + A) then run everything that is highlighted (Cmd/Ctrl + Enter). The whole data cleaning pipeline should run and the clean data file should update every time you run this.

Look out for errors in the console: if you left out a step or completed it in interactively in the console and didn't save the code then the code will break. 

If you are happy with everything remember to Git commit and push your code.

:::

<hr>

::: {style="margin: 0 auto;"}

Congratulations, you made it!! 

<iframe src="https://giphy.com/embed/ely3apij36BJhoZ234" width="480" height="480" frameBorder="0"></iframe><p><a href="https://giphy.com/gifs/good-job-congratulations-otter-ely3apij36BJhoZ234">via GIPHY</a></p>
:::