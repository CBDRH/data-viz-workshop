[
  {
    "objectID": "lectures/lecture-data-vis.html#getting-up",
    "href": "lectures/lecture-data-vis.html#getting-up",
    "title": "Nearly there",
    "section": "Getting up",
    "text": "Getting up\n\nTurn off alarm\nGet out of bed"
  },
  {
    "objectID": "lectures/lecture-data-vis.html#going-to-sleep",
    "href": "lectures/lecture-data-vis.html#going-to-sleep",
    "title": "Nearly there",
    "section": "Going to sleep",
    "text": "Going to sleep\n\nGet in bed\nCount sheep\n\n\n\n\nBack"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#section",
    "href": "lectures/lecture-data-cleaning.html#section",
    "title": "Cleaning data with dplyr and friends",
    "section": "",
    "text": "Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst‚Äù"
  },
  {
    "objectID": "lectures/lecture-orientation.html#mini-exercise",
    "href": "lectures/lecture-orientation.html#mini-exercise",
    "title": "Orientation to working in RStudio",
    "section": "Mini Exercise",
    "text": "Mini Exercise\n\n 5 minutes\n\nMake yourself at home!\n\nEnter getwd() at the console to see your current working directory. Make a note of this.\nIn the RStudio menu navigate to Tools &gt; Global Options &gt; Appearance and choose an editor theme that you like!\n\n\n\n\nBack"
  },
  {
    "objectID": "exercises/exercise2.html",
    "href": "exercises/exercise2.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Exercises",
      "About"
    ]
  },
  {
    "objectID": "exercises/exercise1.html",
    "href": "exercises/exercise1.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Exercises",
      "About"
    ]
  },
  {
    "objectID": "home/index.html",
    "href": "home/index.html",
    "title": "Welcome to the course",
    "section": "",
    "text": "Welcome\n\n\nHousekeeping\n\n\nPrerequisites",
    "crumbs": [
      "Home",
      "Welcome to the course"
    ]
  },
  {
    "objectID": "exercises/exercises.html",
    "href": "exercises/exercises.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "Exercises",
      "About"
    ]
  },
  {
    "objectID": "lectures/lecture-rstudio.html",
    "href": "lectures/lecture-rstudio.html",
    "title": "Orientation to RStudio",
    "section": "",
    "text": "We‚Äôre going to spend two days working on R code so let‚Äôs take a moment to open up RStudio to orientate ourselves.\n\n\n\n\nHere is a snapshot of the RStudio environment.\n\n\n\n\nThere‚Äôs a lot going on!\n\n\n\n\nLet‚Äôs break it down.\n\n\n\n\nThis is an R script file (.R extension). Here you can write R code to clean, analyse, and visualise data\n\n\n\n\nNotice that this file is saved with a proper file name analysis.R so we can open and close the file and come back to the code as needed.\n\n\n\n\nThis area has several tabs. The Environment tab plays a key role in managing and visualizing the objects that exist in the current R session.\n\n\n\n\nVarious types of objects can exist in your environment, for example vectors, dataframes and lists.\n\n\n\n\nCurrently we can see the cars dataset and the meanSpeed value stored in the environment.\n\n\n\n\nNotice the Git tab is also in this area. We‚Äôll use that later.\n\n\n\n\nThere are several important tabs in the bottom right-hand corner\n\n\n\n\nThe Files tab shows us all the file in our project. Spot analsis.R!\n\n\n\n\nFrom here we can open files or navigate to different folders.\n\n\n\n\nOther important tabs in this area includes the Plots tab, where are plots will appear, and the Packages tab that has a list of all the installed packages.\n\n\n\n\nHere we have the console.\n\n\n\n\nThe console allows you to run R commands interactively. You can type a command directly into the console and press Enter to execute it and view the results straight away.\n\n\n\n\nThe console keeps track of previously executed commands. You can use the  up and  down arrow keys to scroll through past commands, making it easy to re-run commands or modify and execute them again.\n\n\n\n\nWorking in the console is convenient for quick, interactive commands, but it doesn‚Äôt save a persistent record of your entered commands so important code should always be saved in a script.\n\n\n\n\nFinally, note this icon in the top right-hand corner. This tells us we are working in an R Project named cars-study."
  },
  {
    "objectID": "lectures/lecture-rstudio.html#r-projects",
    "href": "lectures/lecture-rstudio.html#r-projects",
    "title": "Orientation to RStudio",
    "section": "R Projects",
    "text": "R Projects\n\nUse R projects to keep all your code organised in a single space\n\n\n\nArtwork by @allison_horst"
  },
  {
    "objectID": "lectures/lecture-rstudio.html#relative-paths",
    "href": "lectures/lecture-rstudio.html#relative-paths",
    "title": "Orientation to RStudio",
    "section": "Relative paths",
    "text": "Relative paths\n\nIf the first line of your R script is\nsetwd(\"C:\\Users\\jenny\\path\\that\\only\\I\\have\")\nI will come into your office and SET YOUR COMPUTER ON FIRE üî•.\n\n\n‚ÄîJenny Bryan in Project-oriented workflow\n\nA huge advantage of working in project environments is that we can use relative paths instead of absolute paths.\n\n\n\n\n\n\nTip\n\n\n\nIt is bad practice to include absolute paths like C:\\Users\\jenny\\path\\that\\only\\I\\have in your code\n\n\n\ngetwd()\n\n[1] \"/Users/z3509778/Library/CloudStorage/OneDrive-UNSW/Data Vis Workshop/CourseSite/lectures\""
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-challenge",
    "href": "lectures/lecture-git-github.html#the-challenge",
    "title": "Version control with git and GitHub",
    "section": "The challenge",
    "text": "The challenge\nAs data analysts, we produce a lot of files\n\ncode\nfigures\ntables\nreports\n\nOrganising these files is an important, albeit often unglamorous, part of our job."
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-challenge-1",
    "href": "lectures/lecture-git-github.html#the-challenge-1",
    "title": "Version control with git and GitHub",
    "section": "The Challenge",
    "text": "The Challenge\nManaging versions What do you do with old code?\nEnsuring reproducibility Can others reproduce your results? What about your future self?\nFacilitating collaboration Can other team members easily contribute?"
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-old-school-solution",
    "href": "lectures/lecture-git-github.html#the-old-school-solution",
    "title": "Version control with git and GitHub",
    "section": "The old school solution üõµ",
    "text": "The old school solution üõµ\nThe old school solution combines many practical strategies:\n\n\nUsing file naming conventions to track different file versions\n\nanalysis-16jun2024.do\nanalysis-19jun2024-mh.do\nanalysis-final.do\nanalysis-final-final.do\n\nNote changes directly in code comments or separate documentation\nUse shared folders, google drive etc\nShare code and code snippets over email, slack etc"
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-old-school-solution-1",
    "href": "lectures/lecture-git-github.html#the-old-school-solution-1",
    "title": "Version control with git and GitHub",
    "section": "The old school solution üõµ",
    "text": "The old school solution üõµ\n\nThis is ok(ish) for one person working on a small project. But if the project is large, involves many people or goes on for a long time this approach very quickly breaks down"
  },
  {
    "objectID": "lectures/lecture-git-github.html#the-new-school-solution",
    "href": "lectures/lecture-git-github.html#the-new-school-solution",
    "title": "Version control with git and GitHub",
    "section": "The new school solution üöÄ",
    "text": "The new school solution üöÄ\nThe new school solution is to use dedicated version control software.\nThere are a few options out there but by far the most popular choice is the combination of git + GitHub"
  },
  {
    "objectID": "lectures/lecture-git-github.html#section",
    "href": "lectures/lecture-git-github.html#section",
    "title": "Version control with git and GitHub",
    "section": "",
    "text": "Via git-scm.com\n\n\nGit is software for tracking different versions of code files you are working on locally.\n\n\n\nVia logos-world.net\n\n\nGitHub is a cloud-based platform for sharing and collaborating on projects managed with Git"
  },
  {
    "objectID": "lectures/lecture-git-github.html#how-does-it-work",
    "href": "lectures/lecture-git-github.html#how-does-it-work",
    "title": "Version control with git and GitHub",
    "section": "How does it work?",
    "text": "How does it work?\nCommitting, branching and merging with Git"
  },
  {
    "objectID": "lectures/lecture-git-github.html#how-does-it-work-1",
    "href": "lectures/lecture-git-github.html#how-does-it-work-1",
    "title": "Version control with git and GitHub",
    "section": "How does it work?",
    "text": "How does it work?\nCommitting, branching and merging with Git"
  },
  {
    "objectID": "lectures/lecture-git-github.html#how-does-it-work-2",
    "href": "lectures/lecture-git-github.html#how-does-it-work-2",
    "title": "Version control with git and GitHub",
    "section": "How does it work?",
    "text": "How does it work?\nSharing versions with GitHub\n\n\n\n\nBack"
  },
  {
    "objectID": "lectures/lectures.html",
    "href": "lectures/lectures.html",
    "title": "Lectures",
    "section": "",
    "text": "Orientation to RStudio \n\n\n\n  Version control with git and GitHub \n\n\n\n  Data cleaning with dplyr and friends \n\n\n\n  Visualising data with ggplot2 \n\n\n\n  Literate programming with RMarkdown",
    "crumbs": [
      "Lectures"
    ]
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#section-1",
    "href": "lectures/lecture-data-cleaning.html#section-1",
    "title": "Cleaning data with dplyr and friends",
    "section": "",
    "text": "Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst‚Äù"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#dplyr-verbs",
    "href": "lectures/lecture-data-cleaning.html#dplyr-verbs",
    "title": "Cleaning data with dplyr and friends",
    "section": "dplyr verbs",
    "text": "dplyr verbs\n\n\n\nfilter()\nselect()\nrename()\nmutate()\narrange()\nslice()\ncase_when()\npivot_longer()\n\n\n\nRename a variable?\nSort by a given variable?\nKeep rows that match a condition?\nKeep or drop columns?"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#section-2",
    "href": "lectures/lecture-data-cleaning.html#section-2",
    "title": "Cleaning data with dplyr and friends",
    "section": "",
    "text": "dplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges\n\n\ndplyr.tidyverse.org/"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#dplyr-verbs-1",
    "href": "lectures/lecture-data-cleaning.html#dplyr-verbs-1",
    "title": "Cleaning data with dplyr and friends",
    "section": "dplyr verbs",
    "text": "dplyr verbs\n\n\n\nfilter()\nselect()\nrename()\nmutate()\narrange()\nslice()\ncase_when()\npivot_longer()\n\n\n\nRename a variable?\n\n\n\n\n\n\nBack"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#section-3",
    "href": "lectures/lecture-data-cleaning.html#section-3",
    "title": "Cleaning data with dplyr and friends",
    "section": "",
    "text": "Created by Arthur Welle"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#section-4",
    "href": "lectures/lecture-data-cleaning.html#section-4",
    "title": "Cleaning data with dplyr and friends",
    "section": "",
    "text": "Mini Exercise\n\n\n\n 10 minutes\n\nPractice with dplyr!\n\nIn the RStudio menu navigate to Tools &gt; Global Options &gt; Code and tick the box to use the native pipe operator\nWe will use the penguins dataset shipped in the palmerpenguins library. Determine the longest bill length among the top 5 lightest female penguins from the Gentoo species.\n\n\n# Code to get you started\nlibrary(palmerpenguins) \n\npenguins |&gt; \n  filter(species == )"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#rename-a-variable-with-rename",
    "href": "lectures/lecture-data-cleaning.html#rename-a-variable-with-rename",
    "title": "Cleaning data with dplyr and friends",
    "section": "Rename a variable with rename()",
    "text": "Rename a variable with rename()\n\n\n# rename variable\ncars |&gt; \n  rename(distance = dist)\n\n\n   speed distance\n1      4        2\n2      4       10\n3      7        4\n4      7       22\n5      8       16\n6      9       10\n7     10       18\n8     10       26\n9     10       34\n10    11       17\n11    11       28\n12    12       14\n13    12       20\n14    12       24\n15    12       28\n16    13       26\n17    13       34\n18    13       34\n19    13       46\n20    14       26\n21    14       36\n22    14       60\n23    14       80\n24    15       20\n25    15       26\n26    15       54\n27    16       32\n28    16       40\n29    17       32\n30    17       40\n31    17       50\n32    18       42\n33    18       56\n34    18       76\n35    18       84\n36    19       36\n37    19       46\n38    19       68\n39    20       32\n40    20       48\n41    20       52\n42    20       56\n43    20       64\n44    22       66\n45    23       54\n46    24       70\n47    24       92\n48    24       93\n49    24      120\n50    25       85\n\n\n\n\n\nNote the syntax:\n\n\ndata |&gt; \n  rename(`new-name` = `old-name`)"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#filter-rows-with-filter",
    "href": "lectures/lecture-data-cleaning.html#filter-rows-with-filter",
    "title": "Cleaning data with dplyr and friends",
    "section": "Filter rows with filter()",
    "text": "Filter rows with filter()\n\n\n# Load dplyr library\nlibrary(dplyr)\n\n# Load cars dataset\ndata(cars)\n\n# Filter rows\ncars |&gt; \n  filter(speed == 10)\n\n\n  speed dist\n1    10   18\n2    10   26\n3    10   34\n\n\n\n\n\n\n\n# Filter rows\ncars |&gt; \n  filter(speed &gt;= 10 & dist &lt;= 20)\n\n\n  speed dist\n1    10   18\n2    11   17\n3    12   14\n4    12   20\n5    15   20"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#select-columns-with-select",
    "href": "lectures/lecture-data-cleaning.html#select-columns-with-select",
    "title": "Cleaning data with dplyr and friends",
    "section": "Select columns with select()",
    "text": "Select columns with select()\n\n\n# Filter rows\ncars |&gt; \n  select(starts_with(\"d\"))\n\n\n   dist\n1     2\n2    10\n3     4\n4    22\n5    16\n6    10\n7    18\n8    26\n9    34\n10   17\n11   28\n12   14\n13   20\n14   24\n15   28\n16   26\n17   34\n18   34\n19   46\n20   26\n21   36\n22   60\n23   80\n24   20\n25   26\n26   54\n27   32\n28   40\n29   32\n30   40\n31   50\n32   42\n33   56\n34   76\n35   84\n36   36\n37   46\n38   68\n39   32\n40   48\n41   52\n42   56\n43   64\n44   66\n45   54\n46   70\n47   92\n48   93\n49  120\n50   85"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#select-columns-with-select-1",
    "href": "lectures/lecture-data-cleaning.html#select-columns-with-select-1",
    "title": "Cleaning data with dplyr and friends",
    "section": "Select columns with select()",
    "text": "Select columns with select()\n\n\n# Filter rows\ncars |&gt; \n  select(starts_with(\"d\"))\n\n\n   dist\n1     2\n2    10\n3     4\n4    22\n5    16\n6    10\n7    18\n8    26\n9    34\n10   17\n11   28\n12   14\n13   20\n14   24\n15   28\n16   26\n17   34\n18   34\n19   46\n20   26\n21   36\n22   60\n23   80\n24   20\n25   26\n26   54\n27   32\n28   40\n29   32\n30   40\n31   50\n32   42\n33   56\n34   76\n35   84\n36   36\n37   46\n38   68\n39   32\n40   48\n41   52\n42   56\n43   64\n44   66\n45   54\n46   70\n47   92\n48   93\n49  120\n50   85"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#create-new-variables-with-mutate",
    "href": "lectures/lecture-data-cleaning.html#create-new-variables-with-mutate",
    "title": "Cleaning data with dplyr and friends",
    "section": "Create new variables with mutate()",
    "text": "Create new variables with mutate()\n\n\n# Filter rows\ncars |&gt; \n  mutate(\n    time = dist / speed\n  )\n\n\n   speed dist      time\n1      4    2 0.5000000\n2      4   10 2.5000000\n3      7    4 0.5714286\n4      7   22 3.1428571\n5      8   16 2.0000000\n6      9   10 1.1111111\n7     10   18 1.8000000\n8     10   26 2.6000000\n9     10   34 3.4000000\n10    11   17 1.5454545\n11    11   28 2.5454545\n12    12   14 1.1666667\n13    12   20 1.6666667\n14    12   24 2.0000000\n15    12   28 2.3333333\n16    13   26 2.0000000\n17    13   34 2.6153846\n18    13   34 2.6153846\n19    13   46 3.5384615\n20    14   26 1.8571429\n21    14   36 2.5714286\n22    14   60 4.2857143\n23    14   80 5.7142857\n24    15   20 1.3333333\n25    15   26 1.7333333\n26    15   54 3.6000000\n27    16   32 2.0000000\n28    16   40 2.5000000\n29    17   32 1.8823529\n30    17   40 2.3529412\n31    17   50 2.9411765\n32    18   42 2.3333333\n33    18   56 3.1111111\n34    18   76 4.2222222\n35    18   84 4.6666667\n36    19   36 1.8947368\n37    19   46 2.4210526\n38    19   68 3.5789474\n39    20   32 1.6000000\n40    20   48 2.4000000\n41    20   52 2.6000000\n42    20   56 2.8000000\n43    20   64 3.2000000\n44    22   66 3.0000000\n45    23   54 2.3478261\n46    24   70 2.9166667\n47    24   92 3.8333333\n48    24   93 3.8750000\n49    24  120 5.0000000\n50    25   85 3.4000000"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#create-new-variables-with-mutate-1",
    "href": "lectures/lecture-data-cleaning.html#create-new-variables-with-mutate-1",
    "title": "Cleaning data with dplyr and friends",
    "section": "Create new variables with mutate()",
    "text": "Create new variables with mutate()\n\n\n# Filter rows\ncars |&gt; \n  mutate(\n    class = ifelse(speed &gt;= 10, \n                   \"fast\",\n                   \"slow\")\n  )\n\n\n   speed dist class\n1      4    2  slow\n2      4   10  slow\n3      7    4  slow\n4      7   22  slow\n5      8   16  slow\n6      9   10  slow\n7     10   18  fast\n8     10   26  fast\n9     10   34  fast\n10    11   17  fast\n11    11   28  fast\n12    12   14  fast\n13    12   20  fast\n14    12   24  fast\n15    12   28  fast\n16    13   26  fast\n17    13   34  fast\n18    13   34  fast\n19    13   46  fast\n20    14   26  fast\n21    14   36  fast\n22    14   60  fast\n23    14   80  fast\n24    15   20  fast\n25    15   26  fast\n26    15   54  fast\n27    16   32  fast\n28    16   40  fast\n29    17   32  fast\n30    17   40  fast\n31    17   50  fast\n32    18   42  fast\n33    18   56  fast\n34    18   76  fast\n35    18   84  fast\n36    19   36  fast\n37    19   46  fast\n38    19   68  fast\n39    20   32  fast\n40    20   48  fast\n41    20   52  fast\n42    20   56  fast\n43    20   64  fast\n44    22   66  fast\n45    23   54  fast\n46    24   70  fast\n47    24   92  fast\n48    24   93  fast\n49    24  120  fast\n50    25   85  fast"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#create-more-complex-variables-with-case_when",
    "href": "lectures/lecture-data-cleaning.html#create-more-complex-variables-with-case_when",
    "title": "Cleaning data with dplyr and friends",
    "section": "Create more complex variables with case_when()",
    "text": "Create more complex variables with case_when()\n\n\n# Create a new variable\ncars |&gt; \n  mutate(\n    class = case_when(\n      speed &lt;= 4 ~ \"slow\", \n      speed &lt;= 10 ~ \"average\", \n      .default = \"fast\"\n    )\n  )\n\n\n   speed dist   class\n1      4    2    slow\n2      4   10    slow\n3      7    4 average\n4      7   22 average\n5      8   16 average\n6      9   10 average\n7     10   18 average\n8     10   26 average\n9     10   34 average\n10    11   17    fast\n11    11   28    fast\n12    12   14    fast\n13    12   20    fast\n14    12   24    fast\n15    12   28    fast\n16    13   26    fast\n17    13   34    fast\n18    13   34    fast\n19    13   46    fast\n20    14   26    fast\n21    14   36    fast\n22    14   60    fast\n23    14   80    fast\n24    15   20    fast\n25    15   26    fast\n26    15   54    fast\n27    16   32    fast\n28    16   40    fast\n29    17   32    fast\n30    17   40    fast\n31    17   50    fast\n32    18   42    fast\n33    18   56    fast\n34    18   76    fast\n35    18   84    fast\n36    19   36    fast\n37    19   46    fast\n38    19   68    fast\n39    20   32    fast\n40    20   48    fast\n41    20   52    fast\n42    20   56    fast\n43    20   64    fast\n44    22   66    fast\n45    23   54    fast\n46    24   70    fast\n47    24   92    fast\n48    24   93    fast\n49    24  120    fast\n50    25   85    fast"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#create-new-variables-with-mutate-2",
    "href": "lectures/lecture-data-cleaning.html#create-new-variables-with-mutate-2",
    "title": "Cleaning data with dplyr and friends",
    "section": "Create new variables with mutate()",
    "text": "Create new variables with mutate()\n\n\n# Filter rows\ncars |&gt; \n  mutate(\n    time = dist / speed,\n    class = ifelse(speed &gt;= 10, \n                   \"fast\",\n                   \"slow\")\n  )\n\n\n   speed dist      time class\n1      4    2 0.5000000  slow\n2      4   10 2.5000000  slow\n3      7    4 0.5714286  slow\n4      7   22 3.1428571  slow\n5      8   16 2.0000000  slow\n6      9   10 1.1111111  slow\n7     10   18 1.8000000  fast\n8     10   26 2.6000000  fast\n9     10   34 3.4000000  fast\n10    11   17 1.5454545  fast\n11    11   28 2.5454545  fast\n12    12   14 1.1666667  fast\n13    12   20 1.6666667  fast\n14    12   24 2.0000000  fast\n15    12   28 2.3333333  fast\n16    13   26 2.0000000  fast\n17    13   34 2.6153846  fast\n18    13   34 2.6153846  fast\n19    13   46 3.5384615  fast\n20    14   26 1.8571429  fast\n21    14   36 2.5714286  fast\n22    14   60 4.2857143  fast\n23    14   80 5.7142857  fast\n24    15   20 1.3333333  fast\n25    15   26 1.7333333  fast\n26    15   54 3.6000000  fast\n27    16   32 2.0000000  fast\n28    16   40 2.5000000  fast\n29    17   32 1.8823529  fast\n30    17   40 2.3529412  fast\n31    17   50 2.9411765  fast\n32    18   42 2.3333333  fast\n33    18   56 3.1111111  fast\n34    18   76 4.2222222  fast\n35    18   84 4.6666667  fast\n36    19   36 1.8947368  fast\n37    19   46 2.4210526  fast\n38    19   68 3.5789474  fast\n39    20   32 1.6000000  fast\n40    20   48 2.4000000  fast\n41    20   52 2.6000000  fast\n42    20   56 2.8000000  fast\n43    20   64 3.2000000  fast\n44    22   66 3.0000000  fast\n45    23   54 2.3478261  fast\n46    24   70 2.9166667  fast\n47    24   92 3.8333333  fast\n48    24   93 3.8750000  fast\n49    24  120 5.0000000  fast\n50    25   85 3.4000000  fast"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#keep-rows-that-match-a-condition-with-filter",
    "href": "lectures/lecture-data-cleaning.html#keep-rows-that-match-a-condition-with-filter",
    "title": "Cleaning data with dplyr and friends",
    "section": "Keep rows that match a condition with filter()",
    "text": "Keep rows that match a condition with filter()\n\n\n# Load dplyr library\nlibrary(dplyr)\n\n# Load cars dataset\ndata(cars)\n\n# Filter rows\ncars |&gt; \n  filter(speed == 10)\n\n\n  speed dist\n1    10   18\n2    10   26\n3    10   34\n\n\n\n\n\n\n\n# Filter rows\ncars |&gt; \n  filter(speed &gt;= 10 & dist &lt;= 20)\n\n\n  speed dist\n1    10   18\n2    11   17\n3    12   14\n4    12   20\n5    15   20"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#keep-or-drop-columns-with-select",
    "href": "lectures/lecture-data-cleaning.html#keep-or-drop-columns-with-select",
    "title": "Cleaning data with dplyr and friends",
    "section": "Keep or drop columns with select()",
    "text": "Keep or drop columns with select()\n\n\n# Filter rows\ncars |&gt; \n  select(speed)\n\n\n   speed\n1      4\n2      4\n3      7\n4      7\n5      8\n6      9\n7     10\n8     10\n9     10\n10    11\n11    11\n12    12\n13    12\n14    12\n15    12\n16    13\n17    13\n18    13\n19    13\n20    14\n21    14\n22    14\n23    14\n24    15\n25    15\n26    15\n27    16\n28    16\n29    17\n30    17\n31    17\n32    18\n33    18\n34    18\n35    18\n36    19\n37    19\n38    19\n39    20\n40    20\n41    20\n42    20\n43    20\n44    22\n45    23\n46    24\n47    24\n48    24\n49    24\n50    25"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#keep-rows-by-position-with-slice",
    "href": "lectures/lecture-data-cleaning.html#keep-rows-by-position-with-slice",
    "title": "Cleaning data with dplyr and friends",
    "section": "Keep rows by position with slice()",
    "text": "Keep rows by position with slice()\n\n\n# Slice rows 1 to 3\ncars |&gt; \n  slice(1:3)\n\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n\n\n\n\n\n\n\n# Slice last 3 rows\ncars |&gt; \n  slice_tail(n=3)\n\n\n  speed dist\n1    24   93\n2    24  120\n3    25   85\n\n\n\n\n\n\n\n\n# Slice speediest 3 rows\ncars |&gt; \n  slice_max(speed, n=3)\n\n\n  speed dist\n1    25   85\n2    24   70\n3    24   92\n4    24   93\n5    24  120"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#the-pipe-operator",
    "href": "lectures/lecture-data-cleaning.html#the-pipe-operator",
    "title": "Cleaning data with dplyr and friends",
    "section": "The pipe operator |>",
    "text": "The pipe operator |&gt;\n\n# Sort by speed\ncars |&gt; arrange(speed)\n\n\n\n\n|&gt; is called the pipe operator\nIt takes the object on the left and passes it to the first argument of the function on the right\n\n\n\n\n\n# Equivalent to above code snippet\narrange(cars, speed)\n\n\n\n\nWe can use |&gt; to chain multiple dplyr verbs\nkeyboard shortcut is Ctrl/Cmd + Shift + M"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#the-pipe-operator-1",
    "href": "lectures/lecture-data-cleaning.html#the-pipe-operator-1",
    "title": "Cleaning data with dplyr and friends",
    "section": "The pipe operator |>",
    "text": "The pipe operator |&gt;\n\n\n# Data prep\ncars |&gt; \n  mutate(time = dist / speed) |&gt; \n  arrange(-time) |&gt; \n  slice(1)\n\n\n  speed dist     time\n1    14   80 5.714286\n\n\n\n\n\nOften we will save the output of such a chain using the assignment operator &lt;-\n\n\n# Data prep\nlongestTime &lt;- cars |&gt;\n  mutate(time = dist / speed) |&gt; \n  arrange(-time) |&gt; \n  slice(1)\n\nlongestTime\n\n\n  speed dist     time\n1    14   80 5.714286"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#sort-variables-with-arrange",
    "href": "lectures/lecture-data-cleaning.html#sort-variables-with-arrange",
    "title": "Cleaning data with dplyr and friends",
    "section": "Sort variables with arrange()",
    "text": "Sort variables with arrange()\n\n\n# Sort by speed\ncars |&gt; \n  arrange(speed)\n\n\n   speed dist\n1      4    2\n2      4   10\n3      7    4\n4      7   22\n5      8   16\n6      9   10\n7     10   18\n8     10   26\n9     10   34\n10    11   17\n11    11   28\n12    12   14\n13    12   20\n14    12   24\n15    12   28\n16    13   26\n17    13   34\n18    13   34\n19    13   46\n20    14   26\n21    14   36\n22    14   60\n23    14   80\n24    15   20\n25    15   26\n26    15   54\n27    16   32\n28    16   40\n29    17   32\n30    17   40\n31    17   50\n32    18   42\n33    18   56\n34    18   76\n35    18   84\n36    19   36\n37    19   46\n38    19   68\n39    20   32\n40    20   48\n41    20   52\n42    20   56\n43    20   64\n44    22   66\n45    23   54\n46    24   70\n47    24   92\n48    24   93\n49    24  120\n50    25   85"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#sort-variables-with-arrange-1",
    "href": "lectures/lecture-data-cleaning.html#sort-variables-with-arrange-1",
    "title": "Cleaning data with dplyr and friends",
    "section": "Sort variables with arrange()",
    "text": "Sort variables with arrange()\n\n\n# Sort by speed\ncars |&gt; \n  arrange(-speed, dist)\n\n\n   speed dist\n1     25   85\n2     24   70\n3     24   92\n4     24   93\n5     24  120\n6     23   54\n7     22   66\n8     20   32\n9     20   48\n10    20   52\n11    20   56\n12    20   64\n13    19   36\n14    19   46\n15    19   68\n16    18   42\n17    18   56\n18    18   76\n19    18   84\n20    17   32\n21    17   40\n22    17   50\n23    16   32\n24    16   40\n25    15   20\n26    15   26\n27    15   54\n28    14   26\n29    14   36\n30    14   60\n31    14   80\n32    13   26\n33    13   34\n34    13   34\n35    13   46\n36    12   14\n37    12   20\n38    12   24\n39    12   28\n40    11   17\n41    11   28\n42    10   18\n43    10   26\n44    10   34\n45     9   10\n46     8   16\n47     7    4\n48     7   22\n49     4    2\n50     4   10"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#a-note-on-style",
    "href": "lectures/lecture-data-cleaning.html#a-note-on-style",
    "title": "Cleaning data with dplyr and friends",
    "section": "A note on style",
    "text": "A note on style\n\n\n\n# Data prep\ncars |&gt; \n  mutate(time = dist / speed) |&gt; \n  arrange(-time) |&gt; \n  slice(1)\n\n\n\nNeat and easy to read!\nEach verb on a new line\n|&gt; at end of line\nIndentation\nUse of spacing\n\n\n\n\nAvoid this!\n\n# Data prep\ncars|&gt;mutate(time=dist-speed)|&gt;arrange(-time)|&gt;slice(1)"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#the-old-pipe-operator",
    "href": "lectures/lecture-data-cleaning.html#the-old-pipe-operator",
    "title": "Cleaning data with dplyr and friends",
    "section": "The old pipe operator %>%",
    "text": "The old pipe operator %&gt;%\nIf you‚Äôve been using R for a while you may be familiar with the %&gt;% pipe operator shipped with the magrittr package.\n\n\n\n\n\n# Exactly the same thing!\ncars |&gt; \n  mutate(time = dist / speed)  |&gt; \n  arrange(-time)  |&gt;  \n  slice(1)\n\n\n\n# Exactly the same thing!\ncars %&gt;% \n  mutate(time = dist / speed) %&gt;%\n  arrange(-time) %&gt;% \n  slice(1)\n\n\n\n\n\n\nFor simple cases, |&gt; and %&gt;% behave the same\n|&gt; is simpler\n|&gt; is implemented in base R"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#slide-title",
    "href": "lectures/lecture-data-cleaning.html#slide-title",
    "title": "Cleaning data with dplyr and friends",
    "section": "Slide Title",
    "text": "Slide Title\n\nCreated by Arthur Welle"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#factors-in-r",
    "href": "lectures/lecture-data-cleaning.html#factors-in-r",
    "title": "Cleaning data with dplyr and friends",
    "section": "Factors in R",
    "text": "Factors in R\nEarlier we used case_when() to create a categorical variable with three categories: fast, average, and slow.\n\n\n# Create a new variable\ncars |&gt; \n  mutate(\n    class = case_when(\n      speed &lt;= 4 ~ \"slow\", \n      speed &lt;= 10 ~ \"average\", \n      .default = \"fast\"\n    )) \n\n\n   speed dist   class\n1      4    2    slow\n2      4   10    slow\n3      7    4 average\n4      7   22 average\n5      8   16 average\n6      9   10 average\n7     10   18 average\n8     10   26 average\n9     10   34 average\n10    11   17    fast\n11    11   28    fast\n12    12   14    fast\n13    12   20    fast\n14    12   24    fast\n15    12   28    fast\n16    13   26    fast\n17    13   34    fast\n18    13   34    fast\n19    13   46    fast\n20    14   26    fast\n21    14   36    fast\n22    14   60    fast\n23    14   80    fast\n24    15   20    fast\n25    15   26    fast\n26    15   54    fast\n27    16   32    fast\n28    16   40    fast\n29    17   32    fast\n30    17   40    fast\n31    17   50    fast\n32    18   42    fast\n33    18   56    fast\n34    18   76    fast\n35    18   84    fast\n36    19   36    fast\n37    19   46    fast\n38    19   68    fast\n39    20   32    fast\n40    20   48    fast\n41    20   52    fast\n42    20   56    fast\n43    20   64    fast\n44    22   66    fast\n45    23   54    fast\n46    24   70    fast\n47    24   92    fast\n48    24   93    fast\n49    24  120    fast\n50    25   85    fast"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#factors-in-r-1",
    "href": "lectures/lecture-data-cleaning.html#factors-in-r-1",
    "title": "Cleaning data with dplyr and friends",
    "section": "Factors in R",
    "text": "Factors in R\nWe can group_by() this new variable, then use summarise() to calculate the average speed for each group.\n\n\n# Create a new variable\ncars |&gt; \n  mutate(\n    class = case_when(\n      speed &lt;= 4 ~ \"slow\", \n      speed &lt;= 10 ~ \"average\", \n      .default = \"fast\"\n    )) |&gt; \n  group_by(class) |&gt;  \n  summarise(\n    mean = mean(speed)\n  ) \n\n\n# A tibble: 3 √ó 2\n  class    mean\n  &lt;chr&gt;   &lt;dbl&gt;\n1 average  8.71\n2 fast    17.1 \n3 slow     4   \n\n\n\n\nNotice the ordering of the output! This is because the new class variable is a character vector."
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#factors-in-r-2",
    "href": "lectures/lecture-data-cleaning.html#factors-in-r-2",
    "title": "Cleaning data with dplyr and friends",
    "section": "Factors in R",
    "text": "Factors in R\nFactors are useful for handling categorical variables.\n\n\nCategory names\nOrdering categories\nMapping colors to categories (later!)\n\n\n\nTo create a factor you must start by creating a list of the valid levels:\n\n\n# Vector of valid levels\nclassLevels &lt;- c('slow', \n                 'average', \n                 'fast')\n\n# Create factor variable\nfactor(c('fast', 'slow'), \n       levels = classLevels) \n\n\n[1] fast slow\nLevels: slow average fast"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#factors-in-r-3",
    "href": "lectures/lecture-data-cleaning.html#factors-in-r-3",
    "title": "Cleaning data with dplyr and friends",
    "section": "Factors in R",
    "text": "Factors in R\nLet‚Äôs put it all together!\n\n\n# Create a new variable\ncars |&gt; \n  mutate(\n    class = \n      factor(\n        case_when(\n          speed &lt;= 4 ~ \"slow\", \n          speed &lt;= 10 ~ \"average\", \n          .default = \"fast\"),\n        levels = classLevels)) |&gt; \n  group_by(class) |&gt;  \n  summarise(\n    mean = mean(speed)\n  ) \n\n\n# A tibble: 3 √ó 2\n  class    mean\n  &lt;fct&gt;   &lt;dbl&gt;\n1 slow     4   \n2 average  8.71\n3 fast    17.1 \n\n\n\n\n\nNow the ordering is by speed class, not alphabetically!"
  },
  {
    "objectID": "lectures/lecture-data-cleaning.html#moving-from-wide-to-long-data",
    "href": "lectures/lecture-data-cleaning.html#moving-from-wide-to-long-data",
    "title": "Cleaning data with dplyr and friends",
    "section": "Moving from wide to long data",
    "text": "Moving from wide to long data\nConsider the following dataset:\n\n\n\nBack"
  }
]