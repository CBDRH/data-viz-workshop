---
format: 
  revealjs:
    theme: [night, ../custom.scss]
    highlight-style: monokai
    code-overflow: wrap
footer: '<a href="/lectures/overview.qmd">{{< fa house >}}</a>'
slide-number: c/t
---

## Data visualisation with `ggplot2` {.title-slide}

<img src="../images/ggplot2.png"></img>

## {.center-slide}

![](../images/from-data-to-vis.png)

## {.center-slide}

![](../images/horst/ggplot2-data-masterpiece.png)

::: {.figLab}
[Artwork by @allison_horst](https://twitter.com/allison_horst)
:::

## `ggplot2`

:::: {.columns}

::: {.column .incremental width=60%}

* A grammar of graphics

* Consistent syntax 

* Flexible

* Customisable

* [ggplot2.tidyverse.org](https://ggplot2.tidyverse.org/)

* [exts.ggplot2.tidyverse.org/gallery](https://exts.ggplot2.tidyverse.org/gallery/)


:::


::: {.column width=40%}
![](../images/ggplot2.png)
:::

::::


## Components of `ggplot()` function 

::: {.incremental}

* Data (`data = `)

* Coordinate system (`x` and `y`)
 
* Aesthetics (`aes()`)

* Geometries (`geom_*`)

:::

## `ggplot2` components: Data {.smaller}

```{r}
#| echo: true
#| output-location: column

# Load libraries
library(ggplot2)
library(palmerpenguins)

# Call ggplot
ggplot(
  data = penguins
)
```

## `ggplot2` components: Coordinates {.smaller}

```{r}
#| echo: true
#| output-location: column

# Load libraries
library(ggplot2)
library(palmerpenguins)

# Call ggplot
ggplot(
  data = penguins,
  aes(x = body_mass_g)
)
```

## `ggplot2` components: Geom {.smaller}

```{r}
#| echo: true
#| output-location: column

# Load libraries
library(ggplot2)
library(palmerpenguins)

# Call ggplot
ggplot(
  data = penguins,
  aes(x = body_mass_g)) + 
  geom_histogram()
```

## `ggplot2` components: Static Aesthetics {.smaller}

```{r}
#| echo: true
#| output-location: column

# Load libraries
library(ggplot2)
library(palmerpenguins)

# Call ggplot
ggplot(
  data = penguins,
  aes(x = body_mass_g)) + 
  geom_histogram(
    color = 'navy',
    fill = 'lightblue'
  )
```

## `ggplot2` components: Mapped Aesthetics {.smaller}

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1-11|8|10-11"

# Load libraries
library(ggplot2)
library(palmerpenguins)

# Call ggplot
ggplot(
  data = penguins,
  aes(x = body_mass_g, fill = ..x..)) + 
  geom_histogram() +
  scale_fill_gradient(low = 'lightblue', 
                      high = 'navy')
```


## Two numeric variables

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1-6|6"

# Plot
ggplot(
  data = penguins,
  aes(x = flipper_length_mm, 
      y = bill_length_mm)) + 
  geom_point()
```


## One numeric, One categorical

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1-6|6"
 
# Plot
ggplot(
  data = penguins,
  aes(x = island, 
      y = body_mass_g)) + 
  geom_boxplot()
```


## More elaborate combinations {.smaller}

```{r}
#| echo: true
#| code-fold: true
#| fig-align: center

library(palmerpenguins)
library(ggplot2)
library(RColorBrewer)
library(colorspace)
library(ggtext)

myCols <- brewer.pal(3, 'Set2')

ggplot(data=penguins,
       aes(x = body_mass_g, 
           y = flipper_length_mm,
           color = species,
           fill = species)) +
  geom_point(shape = 21, size = 3) +
  geom_smooth(method="lm", size=3) +
  scale_color_manual("", values = myCols) +
  scale_fill_manual("", values = lighten(myCols, 0.5)) +
  scale_x_continuous(labels = scales::comma) +
  labs(y = "Flipper length (mm)",
       x = "Body mass (g)",
       title = "<span style='color: #8DA0CB'>**Gentoo**</span> penguins are larger and heavier than 
       <span style='color: #66C2A5'>**Adelie**</span> or
       <span style='color: #FC8D62'>**Chinstrap**</span>",
       subtitle = "**Penguin body mass (g) versus flipper length (mm) by species**",
       caption = "**Data** from the Palmer Penguins dataset") +
  theme_minimal() +
  theme(
    plot.title.position = "plot",
    plot.title = element_markdown(color='grey10', size=24),
    plot.subtitle = element_markdown(color='grey60', size=16,
                                 margin = margin(5,0,10,0)),
    plot.caption = element_markdown(color = "grey60",
                                size=10, hjust=0),
    axis.title = element_text(color='grey10', size=16),
    axis.text = element_text(color='grey10', size=14)
  )

```



## `ggplot2` A note on style {.smaller}


:::: {.columns}

::: {.column}
```{r}
#| echo: true
#| eval: false

# Load libraries
library(ggplot2)
library(palmerpenguins)

# Call ggplot
ggplot(
  data = penguins,
  aes(x = body_mass_g)) + 
  geom_histogram(
    color = 'navy',
    fill = 'lightblue')
```
:::

::: {.column .incremental}

* `library()` calls on top
* Plenty of `# Comments`
* Spacing `x = body_mass_g`
* Indentation
* `data = ` and (`aes()`) on separate lines
* Geoms on new lines
* `color` and `fill` on new lines

:::

::::

. . . 

<br>

```{r}
#| echo: true
#| eval: false

ggplot(data=penguins,aes(x=body_mass_g))+geom_histogram(color='navy',fill='lightblue')
```

Does the same but harder to read and debug!

## Mini-Exercise {.smaller} 

::: {.clock}

{{< fa clock >}} 5 minutes

:::

### Modify the starter code to produce the figure

:::: {.columns}

::: {.column width=34%}

<iframe style="width:100%;max-width:360px;height:360px;" src="https://stopwatch-app.com/widget/timer?theme=dark&color=yellow&hrs=0&min=5&sec=0" frameborder="0"></iframe>
  
:::

::: {.column width=66%}

::: {.panel-tabset}

### Figure

```{r}
#| echo: false

# Call ggplot
ggplot(
  data = penguins,
  aes(x = flipper_length_mm)) + 
  geom_density(
    color = 'black',
    fill = 'white',
    linetype = 'dashed',
    linewidth = 3)
```

### Starter code

```{r}
#| echo: true
#| eval: false

# Load libraries
library(ggplot2)
library(palmerpenguins)

# Call ggplot
ggplot(
  data = penguins,
  aes(x = body_mass_g)) + 
  geom_histogram(
    color = 'navy',
    fill = 'lightblue'
  )
```

### Hints

* This is a _density_ plot
* Enter `?geom_density()` at the console to open the R Documentation. Scroll down to the section on **Aesthetics** to read about other modifiable aesthetics.

:::
:::
::::



# Adding aesthetic mappings


## Aesthetic mappings

Map variables to visual elements

::: {.incremental}

* Colour
* Fill
* Shape
* Size
* Line type

:::

## Map colour to body mass

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1-8|7"

# Scatterplot
ggplot(
  data = penguins,
  aes(
    x = body_mass_g, 
    y = flipper_length_mm,
    color = body_mass_g)) + 
  geom_point()
```

## Map size to body mass

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1-8|7"

# Scatterplot
ggplot(
  data = penguins,
  aes(
    x = body_mass_g, 
    y = flipper_length_mm,
    size = body_mass_g)) + 
  geom_point()

```

## Map colour to species

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1-8|7"

# Scatterplot
ggplot(
  data = penguins,
  aes(
    x = body_mass_g, 
    y = flipper_length_mm,
    color = species)) + 
  geom_point()
```


## Map species to colour and shape

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1-9|7-8"

# Scatterplot
ggplot(
  data = penguins,
  aes(
    x = body_mass_g, 
    y = flipper_length_mm,
    color = species,
    shape = species)) + 
  geom_point()
```

## Mini-Exercise {.smaller}

::: {.clock}

{{< fa clock >}} 5 minutes

:::

### Modify the starter code to produce the figure!

:::: {.columns}

::: {.column width=34%}

<iframe style="width:100%;max-width:360px;height:360px;" src="https://stopwatch-app.com/widget/timer?theme=dark&color=yellow&hrs=0&min=5&sec=0" frameborder="0"></iframe>
  
:::

::: {.column width=66%}

::: {.panel-tabset}

### Figure

```{r}
#| echo: false

# Plot
ggplot(
  data = penguins,
  aes(x = species, 
      y = body_mass_g,
      fill = species)
) + 
  geom_boxplot(
    color = "grey30",
    alpha = 0.2)
```

### Starter code

```{r}
#| echo: true
#| eval: false

# Plot
ggplot(
  data = penguins,
  aes(x = island, 
      y = body_mass_g)) + 
  geom_boxplot()
```

:::

:::

::::



# Building more complex plots

## Base plot {.smaller}

```{r}
#| echo: true
#| output-location: column

ggplot(data=penguins,
       aes(x = body_mass_g, 
           y = flipper_length_mm,
           color = species,
           fill = species)) +
  geom_point()
```


## Layering geoms {.smaller}

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1-7|7"
 
ggplot(data=penguins,
       aes(x = body_mass_g, 
           y = flipper_length_mm,
           color = species,
           fill = species)) +
  geom_point() +
  geom_smooth(method = 'lm')
```


## Add color scale {.smaller}

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1-10|1|10"
 
myCols <- c("skyblue", "orange", "forestgreen")

ggplot(data=penguins,
       aes(x = body_mass_g, 
           y = flipper_length_mm,
           color = species,
           fill = species)) +
  geom_point() +
  geom_smooth(method = 'lm') + 
  scale_color_manual(values = myCols)
```

## Add fill scale {.smaller}

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1-11|11"
 
myCols <- c("skyblue", "orange", "forestgreen")

ggplot(data=penguins,
       aes(x = body_mass_g, 
           y = flipper_length_mm,
           color = species,
           fill = species)) +
  geom_point() +
  geom_smooth(method = 'lm') + 
  scale_color_manual(values = myCols) +
  scale_fill_manual(values = myCols)
```

## Vary static aesthetics {.smaller}

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1-11|8,9"
 
myCols <- c("skyblue", "orange", "forestgreen")

ggplot(data=penguins,
       aes(x = body_mass_g, 
           y = flipper_length_mm,
           color = species,
           fill = species)) +
  geom_point(size = 2) +
  geom_smooth(method = 'lm', size = 2) + 
  scale_color_manual(values = myCols) +
  scale_fill_manual(values = myCols)
```


## Add x and y scales {.smaller}

```{r}
#| echo: true
#| output-location: column
#| code-line-numbers: "1-13|12-13"
 
myCols <- c("skyblue", "orange", "forestgreen")

ggplot(data=penguins,
       aes(x = body_mass_g, 
           y = flipper_length_mm,
           color = species,
           fill = species)) +
  geom_point(size = 2) +
  geom_smooth(method = 'lm', size = 2) + 
  scale_color_manual(values = myCols) +
  scale_fill_manual(values = myCols) +
  scale_x_continuous("Body mass (g)") +
  scale_y_continuous("Flipper length (mm)")

```


## Mini-Exercise {.smaller}

::: {.clock}

{{< fa clock >}} 15 minutes

:::

### Use `ggplot2` and the `penguins` data to produce the figure

:::: {.columns}

::: {.column width=34%}

<iframe style="width:100%;max-width:360px;height:360px;" src="https://stopwatch-app.com/widget/timer?theme=dark&color=yellow&hrs=0&min=15&sec=0" frameborder="0"></iframe>
  
:::

::: {.column width=66%}

::: {.panel-tabset}

### Figure

```{r}
#| echo: false

ggplot(
  data = penguins,
  aes(x = species,
      y = body_mass_g,
      fill = species)
) +
  geom_jitter(shape=21) +
  geom_boxplot(
    alpha = 0.5) + 
  scale_y_continuous(
    "Body Mass (g)",
    limits = c(2000, 6000)) + 
  scale_x_discrete(NULL) + 
  scale_fill_manual(
    NULL,
    values = c('grey80',
               'grey80',
               'deeppink')
  )


```

### Hints

::: {.smaller}

* Start by identifying the `x`, `y` and `fill` aesthetics that will go in to `aes()`.
* This plot combines `geom_jitter()` and `geom_boxplot()`
* Setting the `alpha =` argument makes the boxplots transparent
* Use `scale_fill_manual()` to control the fill colors for the three different species

:::

### {{< fa skull-crossbones >}} Seriously, help

```{r}
#| echo: true
#| eval: false

# Fill in the blanks!
ggplot(
  data = ,
  aes(x = ,
      y = ,
      fill = )) +
  geom_jitter(shape = ) +
  geom_boxplot(
    alpha = ) + 
  scale_y_continuous(
    " ",
    limits = c( ,  )) + 
  scale_x_discrete(NULL) + 
  scale_fill_manual(NULL,
    values = c(' ',' ',' '))


```

:::
:::
::::

