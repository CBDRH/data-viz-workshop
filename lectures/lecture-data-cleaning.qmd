---
format: 
  revealjs:
    theme: [night, ../custom.scss]
    highlight-style: monokai
    code-overflow: wrap
footer: '<a href="/lectures/overview.qmd">{{< fa house >}}</a>'
slide-number: c/t
---

## Data cleaning with `dplyr` {.title-slide}

<img src="../images/dplyr.png"></img>


## R Projects

>We use R projects to keep all our code and files organised in a single space

![[Artwork by @allison_horst](https://twitter.com/allison_horst)](../images/horst/rproject-skater.png){align='center'}


## Absolute paths 

```{r}
#| echo: true
#| eval: false

setwd("/Users/z3509778/Library/CloudStorage/OneDrive-UNSW/Data Vis Workshop/CourseSite")

```

. . . 

<br>

> If the first line of your R script is
>
> `setwd("C:\Users\jenny\path\that\only\I\have")`
>
> I will come into your office and SET YOUR COMPUTER ON FIRE ðŸ”¥.

::: {.figLab}

---Jenny Bryan in [Project-oriented workflow](https://www.tidyverse.org/blog/2017/12/workflow-vs-script/)

:::


## Relative paths with `here::here()`

![[Artwork by @allison_horst](https://twitter.com/allison_horst)](../images/horst/here-here.png){align='center'}


## Mini-Exercise

::: {.clock-cr}

{{< fa clock >}} 3 minutes

:::

### Make yourself at home

:::: {.columns}

::: {.column width=34%}

<iframe style="width:100%;max-width:360px;height:360px;" src="https://stopwatch-app.com/widget/timer?theme=dark&color=yellow&hrs=0&min=3&sec=0" frameborder="0"></iframe>
  
:::

::: {.column width=66%}

1. Enter `here::here()` at the console to see your current working directory. This should be where you saved your project!

2. Enter `here::here("exercises")` at the console. What happens?

3. Enter `list.files(here::here("exercises"))` at the console. Note that you don't need the full path! 

:::
::::


## {.center-slide}

![](../images/horst/tidy-data-friends.jpg)

::: {.figLab}
Illustrations from the [Openscapes](https://www.openscapes.org/) blog [Tidy Data for reproducibility, efficiency, and collaboration](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst"
:::


## {.center-slide}

![](../images/horst/tidy-data-structure.jpg)

::: {.figLab}
Illustrations from the [Openscapes](https://www.openscapes.org/) blog [Tidy Data for reproducibility, efficiency, and collaboration](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst"
:::

## 

:::: {.columns}

::: {.column width=50%}
![](../images/dplyr.png)
:::

::: {.column width=50%}
>dplyr is a grammar of data manipulation, providing a **consistent set of verbs** that help you solve the most common data manipulation challenges

::: {.figLab}
[dplyr.tidyverse.org/](https://dplyr.tidyverse.org/)
:::

:::

::::



## `dplyr` verbs

:::: {.columns}

::: {.column width=50%}
* `filter()`
* `select()`
* `rename()`
* `mutate()`
* `arrange()`
* `slice()`
* `case_when()`
* `pivot_longer()`
:::

::: {.incremental .column width=50%}

* Rename a variable?

* Sort by a given variable?

* Keep rows that match a condition?

* Keep or drop columns?

:::

::::



## Keep rows that match a condition with `filter()`

```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "1-9|1-2|4-5|7-9|9"

# Load dplyr library
library(dplyr)

# Load cars dataset
data(cars)

# Filter rows
cars |> 
  filter(speed == 10)

```

. . . 

<br>

```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "1-3|3"

# Filter rows
cars |> 
  filter(speed >= 10 & dist <= 20)

```


## Keep rows by position with `slice()`

```{r}
#| echo: true
#| output-location: column-fragment

# Slice rows 1 to 3
cars |> 
  slice(1:3)

```

. . . 

<br>

```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "1-3|3"
 
# Slice last 3 rows
cars |> 
  slice_tail(n=3)

```

. . . 

<br>

```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "1-3|3"

# Slice speediest 3 rows
cars |> 
  slice_max(speed, n=3)

```


## Keep or drop columns with `select()`

```{r}
#| echo: true
#| output-location: column-fragment


# Filter rows
cars |> 
  select(speed)

```


## Select columns with `select()`

```{r}
#| echo: true
#| output-location: column-fragment


# Filter rows
cars |> 
  select(starts_with("d"))

```


## Rename a variable with `rename()`

```{r}
#| echo: true
#| output-location: column-fragment

# rename variable
cars |> 
  rename(distance = dist)

```



## Create new variables with `mutate()`

```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "1-5|3-5|4"

# Filter rows
cars |> 
  mutate(
    time = dist / speed
  )

```


## Create new variables with `mutate()`

```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "1-7|4-6"

# Filter rows
cars |> 
  mutate(
    class = ifelse(speed >= 10, 
                   "fast",
                   "slow")
  )

```


## Create new variables with `mutate()`

```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "1-8|4|5-7"

# Filter rows
cars |> 
  mutate(
    time = dist / speed,
    class = ifelse(speed >= 10, 
                   "fast",
                   "slow")
  )

```


## Create more complex variables with `case_when()`

```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "1-9|3,9|4,8|5|6|7"


# Create a new variable
cars |> 
  mutate(
    class = case_when(
      speed <= 4 ~ "slow", 
      speed <= 10 ~ "average", 
      .default = "fast"
    )
  )

```

## Sort variables with `arrange()`

```{r}
#| echo: true
#| output-location: column-fragment

# Sort by speed
cars |> 
  arrange(speed)

```

## Sort variables with `arrange()`

```{r}
#| echo: true
#| output-location: column-fragment

# Sort by speed
cars |> 
  arrange(-speed, dist)

```

## The pipe operator `|>` {.smaller}

```{r}
#| echo: true
#| eval: false

# Sort by speed
cars |> arrange(speed)

```
<br>

::: {.incremental}
* `|>` is called the pipe operator
* It takes the object on the left and passes it to the first argument of the function on the right 
:::

. . . 

<br>

```{r}
#| echo: true
#| eval: false

# Equivalent to above code snippet
arrange(cars, speed)

```

<br>

::: {.incremental}
* We can use `|>` to chain multiple `dplyr` verbs 
* keyboard shortcut is Ctrl/Cmd + Shift + M
:::


## The pipe operator `|>`

```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "1-9|3|4|5|1-9"


# Data prep
cars |> 
  mutate(time = dist / speed) |> 
  arrange(-time) |> 
  slice(1)

```

. . . 

<br>

Often we will save the output of such a chain using the assignment operator `<-`

```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "1-9|2|7"


# Data prep
longestTime <- cars |>
  mutate(time = dist / speed) |> 
  arrange(-time) |> 
  slice(1)

longestTime

```

## {background-image="../images/Pipe_baking_backAssign.gif" background-size="contain"}


::: {.figLabBR} 
Created by [Arthur Welle](https://github.com/arthurwelle)
:::

## The old pipe operator `%>%` {.smaller}

If you've been using R for a while you may be familiar with the `%>%` pipe operator shipped with the `magrittr` package.

. . . 

<br>

:::: {.columns}

::: {.column}
```{r}
#| echo: true
#| eval: false

# Exactly the same thing!
cars |> 
  mutate(time = dist / speed)  |> 
  arrange(-time)  |>  
  slice(1)

```
:::

::: {.column}
```{r}
#| echo: true
#| eval: false

# Exactly the same thing!
cars %>% 
  mutate(time = dist / speed) %>%
  arrange(-time) %>% 
  slice(1)

```
:::

::::

<br>

::: {.incremental}

* For simple cases, `|>` and `%>%` behave the same
* `|>` is simpler
* `|>` is implemented in base R

:::


## A note on style

:::: {.columns}

::: {.column}

```{r}
#| echo: true
#| eval: false


# Data prep
cars |> 
  mutate(time = dist / speed) |> 
  arrange(-time) |> 
  slice(1)

```

:::

::: {.column .incremental}

* Neat and easy to read!
* Each verb on a new line
* `|>` at end of line
* Indentation
* Use of spacing


:::

::::

. . . 

Avoid this!

```{r}
#| echo: true
#| eval: false


# Data prep
cars|>mutate(time=dist-speed)|>arrange(-time)|>slice(1)

```


## Mini-Exercise

::: {.clock}

{{< fa clock >}} 10 minutes

:::

### Practice with dplyr!

:::: {.columns}

::: {.column width=34%}

<iframe style="width:100%;max-width:360px;height:360px;" src="https://stopwatch-app.com/widget/timer?theme=dark&color=yellow&hrs=0&min=10&sec=0" frameborder="0"></iframe>
  
:::

::: {.column width=66%}

1. In the RStudio menu navigate to `Tools > Global Options > Code` and tick the box to use the native pipe operator

2. We will use the `penguins` dataset shipped in the `palmerpenguins` library. Determine the longest bill length among the five lightest female penguins from the Gentoo species.

```{r}
#| echo: true
#| eval: false

# Code to get you started
library(palmerpenguins) 

penguins |> 
  filter(species == )

```

:::

::::

#### 



## Factors in R {.smaller}

Earlier we used `case_when()` to create a categorical variable with three categories: fast, average, and slow.

```{r}
#| echo: true
#| output-location: column

# Create a new variable
cars |> 
  mutate(
    class = case_when(
      speed <= 4 ~ "slow", 
      speed <= 10 ~ "average", 
      .default = "fast"
    )) 

```

## Factors in R {.smaller}

We can `group_by()` this new variable, then use `summarise()` to calculate the average speed for each group.

```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "1-19|9|10-19"

# Create a new variable
cars |> 
  mutate(
    class = case_when(
      speed <= 4 ~ "slow", 
      speed <= 10 ~ "average", 
      .default = "fast"
    )) |> 
  group_by(class) |>  
  summarise(
    mean = mean(speed)
  ) 

```

. . . 

Notice the ordering of the output! This is because the new `class` variable is a **character** vector.


## Factors in R {.smaller}

Factors are useful for handling categorical variables.

::: {.incremental}

* Category names
* Ordering categories
* Mapping colors to categories (later!)

:::

. . .

To create a factor you must start by creating a list of the valid **levels**:

```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "1-9|1-4|6-8"

# Vector of valid levels
classLevels <- c('slow', 
                 'average', 
                 'fast')

# Create factor variable
factor(c('fast', 'slow'), 
       levels = classLevels) 

```

## Factors in R {.smaller}

Let's put it all together!

```{r}
#| echo: true
#| output-location: column-fragment
#| code-line-numbers: "1-19|5-10|5,10"

# Create a new variable
cars |> 
  mutate(
    class = 
      factor(
        case_when(
          speed <= 4 ~ "slow", 
          speed <= 10 ~ "average", 
          .default = "fast"),
        levels = classLevels)) |> 
  group_by(class) |>  
  summarise(
    mean = mean(speed)
  ) 

```

. . .

<br>

Now the ordering is by speed class, not alphabetically!


## Moving from wide to long data

Consider the following dataset:

```{r}
#| echo: false

df <- data.frame(
  a = 1
)
```

